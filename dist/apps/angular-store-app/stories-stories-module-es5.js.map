{"version":3,"sources":["webpack:///apps/angular-store-app/src/app/stories/state/stories.store.ts","webpack:///apps/angular-store-app/src/app/stories/state/stories.service.ts","webpack:///apps/angular-store-app/src/app/stories/state/stories.query.ts","webpack:///apps/angular-store-app/src/app/stories/state/story.model.ts","webpack:///apps/angular-store-app/src/app/stories/stories.module.ts","webpack:///apps/angular-store-app/src/app/stories/stories/stories.component.ts","webpack:///apps/angular-store-app/src/app/stories/stories/stories.component.html"],"names":["initialState","loading","someBoolean","skills","config","time","tankOwners","isAdmin","StoriesStore","name","providedIn","StoriesService","storiesStore","story","setLoading","pipe","add","StoriesQuery","store","createStory","title","draft","category","routes","path","component","StoriesModule","forChild","imports","declarations","StoriesComponent","storiesQuery","storiesService","builder","loading$","selectLoading","form","group","control","formKeyBased","array","formRootKey","persistForm","setForm","persistFormKey","persistFormRootKey","storeValue","select","state","akitaForm","value","subscribe","reset","destroy","get","push","addSkill","submit","selector","templateUrl","styleUrls"],"mappings":"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","file":"stories-stories-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Story } from './story.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\n\nexport interface StoriesState extends EntityState<Story> {\n  loading: boolean;\n  someBoolean: boolean;\n  skills: string[];\n  config: {\n    tankOwners: string[];\n    time: string;\n    isAdmin: boolean;\n  };\n}\n\nconst initialState: StoriesState = {\n  loading: false,\n  someBoolean: true,\n  skills: ['JS'],\n  config: {\n    time: '',\n    tankOwners: ['one', 'two '],\n    isAdmin: false\n  }\n};\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'stories' })\nexport class StoriesStore extends EntityStore<StoriesState> {\n  constructor() {\n    super(initialState);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { StoriesStore } from './stories.store';\nimport { mapTo, tap } from 'rxjs/operators';\nimport { timer } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class StoriesService {\n  constructor(private storiesStore: StoriesStore) {}\n\n  add(story) {\n    this.storiesStore.setLoading(true);\n    return timer(1000)\n      .pipe(mapTo(story))\n      .pipe(\n        tap(story => {\n          this.storiesStore.setLoading(false);\n          this.storiesStore.add(story);\n        })\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { StoriesStore, StoriesState } from './stories.store';\nimport { QueryEntity } from '@datorama/akita';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoriesQuery extends QueryEntity<StoriesState> {\n  constructor(protected store: StoriesStore) {\n    super(store);\n  }\n}\n","export type Story = {\n  title: string;\n  story: string;\n  draft: boolean;\n  category: string;\n};\n\nexport function createStory() {\n  return {\n    title: '',\n    story: '',\n    draft: false,\n    category: 'js'\n  } as Story;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoriesComponent } from './stories/stories.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StoriesComponent\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, RouterModule.forChild(routes)],\n  declarations: [StoriesComponent]\n})\nexport class StoriesModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { PersistNgFormPlugin } from '@datorama/akita';\nimport { StoriesQuery } from '../state/stories.query';\nimport { createStory, Story } from '../state/story.model';\nimport { StoriesService } from '../state/stories.service';\n\n@Component({\n  selector: 'app-stories',\n  templateUrl: './stories.component.html',\n  styleUrls: ['./stories.component.css']\n})\nexport class StoriesComponent implements OnInit {\n  form: FormGroup;\n  formKeyBased: FormGroup;\n  formRootKey: FormGroup;\n  storeValue;\n  persistForm: PersistNgFormPlugin<Story>;\n  persistFormKey: PersistNgFormPlugin;\n  persistFormRootKey: PersistNgFormPlugin;\n  loading$: Observable<boolean>;\n\n  constructor(private storiesQuery: StoriesQuery, private storiesService: StoriesService, private builder: FormBuilder) {}\n\n  ngOnInit() {\n    this.loading$ = this.storiesQuery.selectLoading();\n\n    this.form = this.builder.group({\n      title: this.builder.control(''),\n      story: this.builder.control(''),\n      draft: this.builder.control(false),\n      category: this.builder.control('js')\n    });\n\n    this.formKeyBased = this.builder.group({\n      time: this.builder.control(''),\n      tankOwners: this.builder.array([]),\n      isAdmin: this.builder.control(null)\n    });\n\n    this.formRootKey = this.builder.group({\n      skills: this.builder.array([]),\n      someBoolean: this.builder.control(false)\n    });\n\n    this.persistForm = new PersistNgFormPlugin(this.storiesQuery, createStory).setForm(this.form);\n    this.persistFormKey = new PersistNgFormPlugin(this.storiesQuery, 'config').setForm(this.formKeyBased, this.builder);\n    this.persistFormRootKey = new PersistNgFormPlugin(this.storiesQuery).setForm(this.formRootKey, this.builder);\n    this.storeValue = this.storiesQuery.select(state => state.akitaForm);\n  }\n\n  submit() {\n    this.storiesService.add(this.form.value).subscribe(() => this.persistForm.reset());\n    this.persistFormKey.reset();\n    this.persistFormRootKey.reset();\n  }\n\n  ngOnDestroy() {\n    this.persistForm && this.persistForm.destroy();\n  }\n\n  addSkill() {\n    (this.formRootKey.get('skills') as FormArray).push(this.builder.control('Akita'));\n  }\n}\n","<section class=\"padding\">\n\n  <h5>Root Key</h5>\n  <form class=\"col s12\" [formGroup]=\"formRootKey\">\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <p>\n          <label>\n            <input type=\"checkbox\" formControlName=\"someBoolean\"/>\n            <span>Is Admin</span>\n          </label>\n        </p>\n      </div>\n    </div>\n    <button (click)=\"addSkill()\">Add skill</button>\n    {{formRootKey.value | json}}\n  </form>\n\n  {{formKeyBased.value | json}}\n  <h5>Key Based</h5>\n  <form class=\"col s12\" [formGroup]=\"formKeyBased\" (ngSubmit)=\"submit()\">\n    <div class=\"row\">\n      <div class=\"input-field col s12\">\n        <input autocomplete=\"off\" formControlName=\"time\" placeholder=\"Time\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <p>\n          <label>\n            <input type=\"checkbox\" formControlName=\"isAdmin\"/>\n            <span>Is Admin</span>\n          </label>\n        </p>\n      </div>\n    </div>\n  </form>\n\n  <h5>New Story</h5>\n\n  <div class=\"row\">\n    <form class=\"col s12\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n\n\n      <div class=\"row\">\n        <div class=\"input-field col s12\">\n          <input id=\"title\" type=\"text\" autocomplete=\"off\" formControlName=\"title\" placeholder=\"Title\">\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"input-field col s12\">\n          <textarea id=\"story\" class=\"materialize-textarea\" formControlName=\"story\" placeholder=\"Story\"></textarea>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col s12\">\n          <p>\n            <label>\n              <input type=\"checkbox\" formControlName=\"draft\"/>\n              <span>Draft</span>\n            </label>\n          </p>\n        </div>\n      </div>\n\n\n      <div class=\"row\">\n        <div class=\"col s12\">\n          <label>Category</label>\n          <select class=\"browser-default\" formControlName=\"category\">\n            <option value=\"js\">JavaScript</option>\n            <option value=\"rxjs\">RxJS</option>\n            <option value=\"angular\">Angular</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"progress\" *ngIf=\"loading$ | async\">\n        <div class=\"indeterminate\"></div>\n      </div>\n\n      <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n        <i class=\"material-icons right\">send</i>\n      </button>\n\n    </form>\n\n  </div>\n\n  <div class=\"row\">\n    <section style=\"margin-top: 10px\">\n      <h6>Form local value:</h6>\n      {{form.value | json}}\n\n      <h6>Store value:</h6>\n      {{storeValue | async | json}}\n    </section>\n  </div>\n\n</section>"]}