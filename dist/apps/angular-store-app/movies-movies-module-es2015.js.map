{"version":3,"sources":["./apps/angular-store-app/src/app/movies/normalized.ts","./apps/angular-store-app/src/app/movies/state/movies.service.ts","./apps/angular-store-app/src/app/movies/genres/state/genres.query.ts","./apps/angular-store-app/src/app/movies/genres/state/genres.store.ts","./apps/angular-store-app/src/app/movies/state/movie.effects.ts","./apps/angular-store-app/src/app/movies/actors/state/actors.store.ts","./apps/angular-store-app/src/app/movies/movies.module.ts","./apps/angular-store-app/src/app/movies/actors/state/actors.query.ts","./apps/angular-store-app/src/app/movies/state/movies.store.ts","./apps/angular-store-app/src/app/movies/movies/movies.component.ts","./apps/angular-store-app/src/app/movies/movies/movies.component.html","./apps/angular-store-app/src/app/movies/state/movies.query.ts"],"names":[],"mappings":"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","file":"movies-movies-module-es2015.js","sourcesContent":["export const movies = {\n  entities: {\n    genres: {\n      '1': {\n        id: 1,\n        name: 'Action'\n      },\n      '2': {\n        id: 2,\n        name: 'Adventure'\n      },\n      '3': {\n        id: 3,\n        name: 'Crime'\n      },\n      '4': {\n        id: 4,\n        name: 'Drama'\n      },\n      '5': {\n        id: 5,\n        name: 'Mystery'\n      },\n      '6': {\n        id: 6,\n        name: 'Sci-Fi'\n      }\n    },\n    actors: {\n      '288': {\n        id: 288,\n        name: 'Christian Bale'\n      },\n      '323': {\n        id: 323,\n        name: 'Michael Caine'\n      },\n      '5132': {\n        id: 5132,\n        name: 'Heath Ledger'\n      },\n      '413168': {\n        id: 413168,\n        name: 'Hugh Jackman'\n      },\n      '3822462': {\n        id: 3822462,\n        name: 'Rila Fukushima'\n      },\n      '5148840': {\n        id: 5148840,\n        name: 'Tao Okamoto'\n      }\n    },\n    movies: {\n      '468569': {\n        id: 468569,\n        title: 'The Dark Knight',\n        genres: [1, 3, 4],\n        actors: [288, 5132, 323]\n      },\n      '482571': {\n        id: 482571,\n        title: 'The Prestige',\n        genres: [4, 5, 6],\n        actors: [413168, 288, 323]\n      },\n      '1430132': {\n        id: 1430132,\n        title: 'The Wolverine',\n        genres: [1, 2, 6],\n        actors: [413168, 5148840, 3822462]\n      }\n    }\n  },\n  result: [468569, 482571, 1430132]\n};\n","import { Injectable } from '@angular/core';\nimport { MoviesStore } from './movies.store';\nimport { ID, transaction, withTransaction, arrayRemove } from '@datorama/akita';\nimport { of, timer } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport { movies } from '../normalized';\nimport { ActorsStore } from '../actors/state/actors.store';\nimport { GenresStore } from '../genres/state/genres.store';\nimport { MoviesQuery } from './movies.query';\n\n@Injectable({ providedIn: 'root' })\nexport class MoviesService {\n  constructor(private moviesStore: MoviesStore, private actorsStore: ActorsStore, private genresStore: GenresStore, private moviesQuery: MoviesQuery) {}\n\n  getMovies() {\n    const request$ = timer(1000).pipe(\n      mapTo(movies),\n      withTransaction(response => {\n        this.actorsStore.set(response.entities.actors);\n        this.genresStore.set(response.entities.genres);\n        const movies = {\n          entities: response.entities.movies,\n          ids: response.result\n        };\n        this.moviesStore.set(movies);\n      })\n    );\n\n    return this.moviesQuery.getHasCache() ? of() : request$;\n  }\n\n  updateActorName(id: ID, name: string) {\n    this.actorsStore.update(id, { name });\n  }\n\n  markAsOpen(id: ID) {\n    this.moviesStore.ui.update(id, entity => ({ isOpen: !entity.isOpen }));\n  }\n\n  @transaction()\n  deleteActor(id: ID) {\n    this.actorsStore.remove(id);\n    this.moviesStore.update(null, entity => ({ actors: arrayRemove(entity.actors, id) }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GenresStore, GenresState } from './genres.store';\nimport { QueryEntity } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class GenresQuery extends QueryEntity<GenresState> {\n  constructor(protected store: GenresStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Genre } from './genre.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\n\nexport interface GenresState extends EntityState<Genre> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'genres' })\nexport class GenresStore extends EntityStore<GenresState> {\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@datorama/akita-ng-effects';\nimport { MoviesStore } from './movies.store';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MovieEffects {\n  constructor(private actions$: Actions, private movieStore: MoviesStore) {}\n\n  @Effect({ dispatch: false })\n  allActionsMovie = this.actions$.pipe(tap((action) => console.log('movie effect', action)));\n}\n","import { Injectable } from '@angular/core';\nimport { Actor } from './actor.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\n\nexport interface ActorsState extends EntityState<Actor> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'actors' })\nexport class ActorsStore extends EntityStore<ActorsState> {\n  constructor() {\n    super();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MoviesComponent } from './movies/movies.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\nimport { MovieEffects } from './state/movie.effects';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MoviesComponent,\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), AkitaNgEffectsModule.forFeature([MovieEffects])],\n  declarations: [MoviesComponent],\n})\nexport class MoviesModule {}\n","import { Injectable } from '@angular/core';\nimport { ActorsStore, ActorsState } from './actors.store';\nimport { QueryEntity } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class ActorsQuery extends QueryEntity<ActorsState> {\n  constructor(protected store: ActorsStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Movie } from './movie.model';\nimport { EntityState, EntityStore, EntityUIStore, StoreConfig } from '@datorama/akita';\n\nexport interface MovieUI {\n  isOpen: boolean;\n}\n\nexport interface MoviesState extends EntityState<Movie> {}\n\nexport interface MoviesUIState extends EntityState<MovieUI> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'movies' })\nexport class MoviesStore extends EntityStore<MoviesState> {\n  ui: EntityUIStore<MoviesUIState>;\n\n  constructor() {\n    super();\n    this.createUIStore().setInitialEntityState<MovieUI>({ isOpen: true });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FullMovie } from '../state/movie.model';\nimport { ID } from '@datorama/akita';\nimport { MoviesQuery } from '../state/movies.query';\nimport { MoviesService } from '../state/movies.service';\nimport { ActorsQuery } from '../actors/state/actors.query';\nimport { Actor } from '../actors/state/actor.model';\nimport { memo } from 'helpful-decorators';\n\n@Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.css']\n})\nexport class MoviesComponent implements OnInit {\n  movies$: Observable<FullMovie[]>;\n  actors$: Observable<Actor[]>;\n  isLoading$: Observable<boolean>;\n  private edits = new Set();\n\n  constructor(private moviesQuery: MoviesQuery, private actorsQuery: ActorsQuery, private moviesService: MoviesService) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.moviesQuery.selectLoading();\n\n    this.movies$ = this.moviesQuery.selectMovies();\n    this.actors$ = this.actorsQuery.selectAll();\n    this.moviesService.getMovies().subscribe();\n  }\n\n  edit(id: ID, name: string) {\n    this.moviesService.updateActorName(id, name);\n    this.edits.delete(id);\n  }\n\n  toggleView(id: ID, actorName: HTMLInputElement) {\n    if (this.edits.has(id)) {\n      this.edits.delete(id);\n    } else {\n      this.edits.add(id);\n      actorName.focus();\n    }\n  }\n\n  inEditMode(id: ID) {\n    return this.edits.has(id);\n  }\n\n  @memo()\n  isOpen(id: ID) {\n    return this.moviesQuery.ui.selectEntity(id, 'isOpen');\n  }\n\n  markAsOpen(id: ID) {\n    this.moviesService.markAsOpen(id);\n  }\n\n  deleteActor(actor: Actor) {\n    this.moviesService.deleteActor(actor.id);\n  }\n}\n","<section class=\"padding\">\n\n  <div class=\"progress\" *ngIf=\"isLoading$ | async\">\n    <div class=\"indeterminate\"></div>\n  </div>\n\n  <h3>Movies</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Title</th>\n        <th>Actors</th>\n        <th>Genres</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let movie of movies$ | async\" (click)=\"markAsOpen(movie.id)\" [ngStyle]=\"(isOpen(movie.id) | async) && { background: 'lightgrey' }\">\n        <td>{{movie.title}}</td>\n        <td><span *ngFor=\"let actor of movie.actors\">{{actor.name}}</span></td>\n        <td><span *ngFor=\"let genre of movie.genres\">{{genre.name}}</span></td>\n      </tr>\n    </tbody>\n  </table>\n\n  <h3>Actors</h3>\n  <table style=\"width: 30%;\">\n    <thead>\n      <tr>\n        <th>Name</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let actor of actors$ | async\">\n        <td class=\"flex align-center\">\n          <input #actorName [value]=\"actor.name\" class=\"actor-input\" [class.view]=\"!inEditMode(actor.id)\"\n                 (keyup.enter)=\"edit(actor.id, actorName.value)\">\n          <i class=\"tiny material-icons\" (click)=\"toggleView(actor.id, actorName)\">edit</i>\n        </td>\n        <td><button (click)=\"deleteActor(actor)\">Delete</button></td>\n      </tr>\n    </tbody>\n  </table>\n\n</section>\n","import { Injectable } from '@angular/core';\nimport { MoviesState, MoviesStore, MoviesUIState } from './movies.store';\nimport {\n  EntityUIQuery,\n  ID,\n  QueryEntity,\n  combineQueries\n} from '@datorama/akita';\nimport { map } from 'rxjs/operators';\nimport { ActorsQuery } from '../actors/state/actors.query';\nimport { GenresQuery } from '../genres/state/genres.query';\n\n@Injectable({ providedIn: 'root' })\nexport class MoviesQuery extends QueryEntity<MoviesState> {\n  ui: EntityUIQuery<MoviesUIState>;\n\n  constructor(\n    protected store: MoviesStore,\n    private actorsQuery: ActorsQuery,\n    private genresQuery: GenresQuery\n  ) {\n    super(store);\n    this.createUIQuery();\n  }\n\n  selectMovies() {\n    return combineQueries([\n      this.selectAll(),\n      this.actorsQuery.selectAll({ asObject: true }),\n      this.genresQuery.selectAll({ asObject: true })\n    ]).pipe(\n      map(([movies, actors, genres]) => {\n        return movies.map(movie => {\n          return {\n            ...movie,\n            actors: movie.actors.map(actorId => actors[actorId]),\n            genres: movie.genres.map(genreId => genres[genreId])\n          };\n        });\n      })\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}