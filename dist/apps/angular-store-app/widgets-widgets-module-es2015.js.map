{"version":3,"sources":["./apps/angular-store-app/src/app/widgets/widgets.component.ts","./apps/angular-store-app/src/app/widgets/widgets.component.html","./apps/angular-store-app/src/app/widgets/state/widgets.query.ts","./apps/angular-store-app/src/app/widgets/state/widget.model.ts","./apps/angular-store-app/src/app/widgets/state/widgets.service.ts","./apps/angular-store-app/src/app/widgets/widgets.module.ts","./apps/angular-store-app/src/app/widgets/state/widgets.store.ts"],"names":[],"mappings":"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","file":"widgets-widgets-module-es2015.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DirtyCheckPlugin, EntityDirtyCheckPlugin, ID } from '@datorama/akita';\nimport { resetId, Widget } from './state/widget.model';\nimport { WidgetsService } from './state/widgets.service';\nimport { WidgetsQuery } from './state/widgets.query';\n\n@Component({\n  selector: 'app-widgets',\n  templateUrl: './widgets.component.html'\n})\nexport class WidgetsComponent implements OnInit, OnDestroy {\n  collection: DirtyCheckPlugin;\n  widgetsSpecific: EntityDirtyCheckPlugin;\n  widgets$: Observable<Widget[]>;\n  activeWidgets$: Observable<Widget[]>;\n  dashoboardName$: Observable<string>;\n\n  constructor(\n    private widgetsQuery: WidgetsQuery,\n    private widgetService: WidgetsService\n  ) {}\n\n  ngOnInit() {\n    if (this.widgetsQuery.hasEntity() === false) {\n      this.widgetService.initWidgets();\n    }\n    this.dashoboardName$ = this.widgetsQuery.select(state => state.name);\n    this.widgets$ = this.widgetsQuery.selectAll();\n    this.activeWidgets$ = this.widgetsQuery.selectActive();\n    this.collection = new DirtyCheckPlugin(this.widgetsQuery, {\n      watchProperty: 'entities'\n    }).setHead();\n    this.widgetsSpecific = new EntityDirtyCheckPlugin(\n      this.widgetsQuery\n    ).setHead();\n  }\n\n  updateName(nameInput) {\n    this.widgetService.updateName(nameInput.value);\n  }\n\n  updateWidget(id: ID, name: string) {\n    this.widgetService.updateWidget(id, name);\n  }\n\n  add() {\n    this.widgetService.add();\n  }\n\n  remove(id?: ID) {\n    this.widgetService.remove(id);\n  }\n\n  revert(id) {\n    this.widgetsSpecific.reset(id);\n  }\n\n  revertStore() {\n    resetId(5);\n    this.collection.reset();\n  }\n\n  ngOnDestroy() {\n    resetId();\n    this.collection.destroy();\n    this.widgetsSpecific.destroy();\n  }\n\n  addActive(id: ID) {\n    this.widgetService.addActive(id);\n  }\n\n  removeActive(id: ID) {\n    this.widgetService.removeActive(id);\n  }\n\n  toggleActive(id: ID) {\n    this.widgetService.toggleActive(id);\n  }\n}\n","<div class=\"padding flex flex-column\">\n  <div class=\"flex align-center\">\n    <h4 style=\"margin-right: 20px;\">Page name: {{ dashoboardName$ | async }}</h4>\n    <input (keydown.enter)=\"updateName(pageName)\" [value]=\"dashoboardName$ | async\" #pageName style=\"width: 250px;margin-right: 20px;\">\n    <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"updateName(pageName)\">Update\n      Name\n      <i class=\"material-icons right\">save</i>\n    </button>\n  </div>\n  <div>\n    <h6>The dirty check plugin is only listening to widgets changes and therefore isn't effecting the page name</h6>\n  </div>\n  <div>\n    Active: {{activeWidgets$ | async | json}}\n  </div>\n  <div class=\"all-widgets-dirty-check flex flex-column flex-1 align-center\">\n    <table class=\"striped centered padding\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Name</th>\n          <th>Update</th>\n          <th>Revert</th>\n          <th>Delete</th>\n          <th>Set Active</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <tr *ngFor=\"let widget of widgets$ | async\">\n          <td>{{widget.id}}</td>\n          <td style=\"width: 200px;\">\n            <input (keydown.enter)=\"updateWidget(widget.id, name.value)\" [value]=\"widget.name\" #name style=\"margin-right: 20px;\">\n          </td>\n          <td>\n            <a class=\"btn-floating\">\n              <i class=\"material-icons\" (click)=\"updateWidget(widget.id, name.value)\">save</i>\n            </a>\n          </td>\n          <td>\n            <a class=\"btn-floating\" [class.disabled]=\"!(widgetsSpecific.isDirty(widget.id) | async)\">\n              <i class=\"material-icons\" (click)=\"revert(widget.id)\">undo</i>\n            </a>\n          </td>\n          <td>\n            <a class=\"btn-floating\"><i class=\"material-icons\" (click)=\"remove(widget.id)\">delete</i></a>\n          </td>\n          <td><button (click)=\"addActive(widget.id)\">Add Active</button></td>\n          <td><button (click)=\"removeActive(widget.id)\">Remove Active</button></td>\n          <td><button (click)=\"toggleActive(widget.id)\">Toggle Active</button></td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"flex sb\">\n      <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"remove()\">Clear list\n        <i class=\"material-icons right\">clear</i>\n      </button>\n      <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"add()\">Add widget\n        <i class=\"material-icons right\">add_circle</i>\n      </button>\n      <button class=\"btn waves-effect waves-light tooltipped\" style=\"margin: 20px 10px 0 0;\" [class.disabled]=\"!(collection.isDirty$ | async)\"\n        (click)=\"revertStore()\">Reset Store Entities\n        <i class=\"material-icons right\">undo</i>\n      </button>\n    </div>\n\n  </div>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { WidgetsState, WidgetsStore } from './widgets.store';\n\n@Injectable({ providedIn: 'root' })\nexport class WidgetsQuery extends QueryEntity<WidgetsState> {\n  constructor(protected store: WidgetsStore) {\n    super(store);\n  }\n}\n","import { ID } from '@datorama/akita';\n\nexport type Widget = {\n  id: ID;\n  name: string;\n};\n\nlet _id = 0;\n\nexport function createWidget() {\n  return {\n    id: ++_id,\n    name: `Widget ${_id}`\n  } as Widget;\n}\n\nexport function resetId(count?: number) {\n  _id = count || 0;\n}\n","import { Injectable } from '@angular/core';\nimport { WidgetsStore } from './widgets.store';\nimport { createWidget } from './widget.model';\nimport { ID } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class WidgetsService {\n  constructor(private widgetsStore: WidgetsStore) {}\n\n  initWidgets() {\n    const widgets = [createWidget(), createWidget(), createWidget(), createWidget(), createWidget()];\n    this.widgetsStore.set(widgets);\n  }\n\n  updateWidget(id: ID, name: string) {\n    this.widgetsStore.update(id, { name });\n  }\n\n  add() {\n    this.widgetsStore.add(createWidget());\n  }\n\n  remove(id?: ID) {\n    this.widgetsStore.remove(id);\n  }\n\n  updateName(name: string) {\n    this.widgetsStore.update({ name });\n  }\n\n  addActive(id: ID) {\n    this.widgetsStore.addActive(id);\n  }\n\n  removeActive(id: ID) {\n    this.widgetsStore.removeActive(id);\n  }\n\n  toggleActive(id: ID) {\n    this.widgetsStore.toggleActive(id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WidgetsComponent } from './widgets.component';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WidgetsComponent\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes)],\n  declarations: [WidgetsComponent]\n})\nexport class WidgetsModule {}\n","import { Injectable } from '@angular/core';\nimport { Widget } from './widget.model';\nimport { EntityState, EntityStore, StoreConfig, MultiActiveState } from '@datorama/akita';\n\nexport interface WidgetsState extends EntityState<Widget>, MultiActiveState {\n  name: string;\n}\n\nconst initState = {\n  name: 'Akita widgets',\n  active: []\n};\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'widgets' })\nexport class WidgetsStore extends EntityStore<WidgetsState> {\n  constructor() {\n    super(initState);\n  }\n}\n"],"sourceRoot":"webpack:///"}