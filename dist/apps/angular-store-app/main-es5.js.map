{"version":3,"sources":["webpack:///libs/akita-ng-router-store/src/lib/router.store.ts","webpack:///apps/angular-store-app/src/app/product-page/product-page.component.ts","webpack:///libs/akita/src/lib/plugins/dirtyCheck/entityDirtyCheckPlugin.ts","webpack:///apps/angular-store-app/src/app/products/state/products.store.ts","webpack:///apps/angular-store-app/src/app/products/state/products.query.ts","webpack:///libs/akita/src/lib/plugins/persistForm/persistNgFormPlugin.ts","webpack:///libs/akita/src/lib/toEntitiesObject.ts","webpack:///apps/angular-store-app/src/app/products/products.module.ts","webpack:///libs/akita/src/lib/store.ts","webpack:///libs/akita/src/lib/root.ts","webpack:///apps/angular-store-app/src/app/cart/cart.component.ts","webpack:///apps/angular-store-app/src/app/cart/cart.component.html","webpack:///libs/akita/src/lib/addEntities.ts","webpack:///libs/akita/src/lib/plugins/paginator/paginatorPlugin.ts","webpack:///libs/akita/src/lib/stores.ts","webpack:///libs/akita/src/lib/index.ts","webpack:///apps/angular-store-app/src/app/auth/login/login.component.ts","webpack:///apps/angular-store-app/src/app/auth/login/login.component.html","webpack:///libs/akita-ng-devtools/src/lib/ng-devtools.module.ts","webpack:///libs/akita/src/lib/entitiesToMap.ts","webpack:///libs/akita-ng-entity-service/src/lib/ng-entity.service.ts","webpack:///libs/akita-ng-router-store/src/lib/router.query.ts","webpack:///libs/akita/src/lib/coerceArray.ts","webpack:///libs/akita-ng-router-store/src/index.ts","webpack:///libs/akita/src/lib/isNil.ts","webpack:///libs/akita-ng-effects/src/lib/akita-ng-effects.module.ts","webpack:///libs/akita/src/lib/arrayFind.ts","webpack:///libs/akita/src/lib/isUndefined.ts","webpack:///libs/akita/src/lib/setLoadingAndError.ts","webpack:///apps/angular-store-app/src/app/products/products.component.ts","webpack:///apps/angular-store-app/src/app/products/products.component.html","webpack:///apps/angular-store-app/src/app/cart/state/cart.model.ts","webpack:///libs/akita-ng-effects/src/lib/create-effect.util.ts","webpack:///libs/akita/src/lib/errors.ts","webpack:///libs/akita/src/lib/cacheable.ts","webpack:///apps/angular-store-app/src/app/cart/state/cart.effects.ts","webpack:///libs/akita/src/lib/getInitialEntitiesState.ts","webpack:///libs/akita/src/lib/snapshotManager.ts","webpack:///libs/akita-ng-effects/src/lib/tokens.ts","webpack:///apps/angular-store-app/src/app/auth/auth.guard.ts","webpack:///libs/akita/src/lib/mapSkipUndefined.ts","webpack:///libs/akita/src/lib/queryEntity.ts","webpack:///apps/angular-store-app/src/app/products/state/products.service.ts","webpack:///libs/akita-ng-router-store/src/lib/router.module.ts","webpack:///apps/angular-store-app/src/app/app-routing.module.ts","webpack:///libs/akita/src/lib/plugins/stateHistory/entityStateHistoryPlugin.ts","webpack:///apps/angular-store-app/src/app/auth/auth.module.ts","webpack:///apps/angular-store-app/src/environments/environment.ts","webpack:///libs/akita/src/lib/plugins/plugin.ts","webpack:///apps/angular-store-app/src/app/cart/state/cart.actions.ts","webpack:///libs/akita/src/lib/entitiesToArray.ts","webpack:///apps/angular-store-app/src/app/products/state/products.effects.ts","webpack:///libs/akita/src/lib/toBoolean.ts","webpack:///libs/akita-ng-effects/src/lib/module-manager.service.ts","webpack:///libs/akita/src/lib/guid.ts","webpack:///libs/akita/src/lib/deepFreeze.ts","webpack:///libs/akita/src/lib/config.ts","webpack:///libs/akita/src/lib/removeEntities.ts","webpack:///libs/akita/src/lib/updateEntities.ts","webpack:///apps/angular-store-app/src/main.ts","webpack:///apps/angular-store-app/src/app/auth/state/auth.query.ts","webpack:///apps/angular-store-app/src/app/products/product/product.component.ts","webpack:///apps/angular-store-app/src/app/products/product/product.component.html","webpack:///libs/akita-ng-effects/src/lib/effect.utils.ts","webpack:///apps/angular-store-app/src/app/auth/state/auth.store.ts","webpack:///apps/angular-store-app/src/app/auth/login/login.module.ts","webpack:///libs/akita-ng-entity-service/src/index.ts","webpack:///libs/akita/src/lib/combineQueries.ts","webpack:///apps/angular-store-app/src/app/nav/nav.component.ts","webpack:///apps/angular-store-app/src/app/cart/state/cart.service.ts","webpack:///libs/akita-ng-effects/src/lib/effect.decorator.ts","webpack:///libs/akita/src/lib/actions.ts","webpack:///libs/akita/src/lib/runStoreAction.ts","webpack:///libs/akita/src/lib/setValueByString.ts","webpack:///apps/angular-store-app/src/app/auth/state/auth.effects.ts","webpack:///libs/akita/src/lib/plugins/dirtyCheck/dirtyCheckPlugin.ts","webpack:///libs/akita/src/lib/entityActions.ts","webpack:///libs/akita/src/lib/arrayAdd.ts","webpack:///libs/akita/src/lib/query.ts","webpack:///libs/akita-ng-entity-service/src/lib/helpers.ts","webpack:///libs/akita-ng-router-store/src/lib/router.service.ts","webpack:///libs/akita/src/lib/isPlainObject.ts","webpack:///libs/akita/src/lib/isNumber.ts","webpack:///libs/akita/src/lib/transaction.ts","webpack:///libs/akita/src/lib/env.ts","webpack:///libs/akita/src/lib/arrayRemove.ts","webpack:///libs/akita/src/lib/arrayUpdate.ts","webpack:///libs/akita/src/lib/devtools.ts","webpack:///libs/akita-ng-devtools/src/index.ts","webpack:///libs/akita/src/lib/isDefined.ts","webpack:///libs/akita/src/lib/toEntitiesIds.ts","webpack:///libs/akita-ng-entity-service/src/lib/ng-entity-service.loader.ts","webpack:///libs/akita/src/lib/not.ts","webpack:///apps/angular-store-app/src/app/products/products.mocks.ts","webpack:///libs/akita-ng-entity-service/src/lib/ng-entity-service-notifier.ts","webpack:///libs/akita/src/lib/isArray.ts","webpack:///libs/akita/src/lib/compareKeys.ts","webpack:///libs/akita-ng-effects/src/index.ts","webpack:///libs/akita/src/lib/arrayUpsert.ts","webpack:///libs/akita/src/lib/trackIdChanges.ts","webpack:///libs/akita/src/index.ts","webpack:///libs/akita/src/lib/hasEntity.ts","webpack:///libs/akita/src/lib/getValueByString.ts","webpack:///apps/angular-store-app/src/app/auth/state/auth.service.ts","webpack:///apps/angular-store-app/$_lazy_route_resource lazy namespace object","webpack:///libs/akita-ng-entity-service/src/lib/action-factory.ts","webpack:///libs/akita/src/lib/getActiveEntities.ts","webpack:///apps/angular-store-app/src/app/cart/cart.module.ts","webpack:///libs/akita-ng-effects/src/lib/actions.ts","webpack:///libs/akita/src/lib/persistState.ts","webpack:///libs/akita/src/lib/plugins/entityCollectionPlugin.ts","webpack:///libs/akita/src/lib/plugins/stateHistory/stateHistoryPlugin.ts","webpack:///apps/angular-store-app/src/app/cart/state/cart.store.ts","webpack:///libs/akita/src/lib/storeConfig.ts","webpack:///libs/akita/src/lib/isObject.ts","webpack:///libs/akita/src/lib/entityService.ts","webpack:///libs/akita/src/lib/defaultIDKey.ts","webpack:///libs/akita/src/lib/filterNil.ts","webpack:///libs/akita/src/lib/capitalize.ts","webpack:///libs/akita/src/lib/queryConfig.ts","webpack:///libs/akita/src/lib/setLoading.ts","webpack:///libs/akita/src/lib/setEntities.ts","webpack:///libs/akita/src/lib/isString.ts","webpack:///libs/akita/src/lib/activeState.ts","webpack:///libs/akita-ng-effects/src/lib/effect-root.module.ts","webpack:///libs/akita/src/lib/fp.ts","webpack:///libs/akita-ng-effects/src/lib/effect-feature.module.ts","webpack:///libs/akita-ng-entity-service/src/lib/ng-entity-service.config.ts","webpack:///libs/akita/src/lib/entityStore.ts","webpack:///apps/angular-store-app/src/app/app.module.ts","webpack:///libs/akita/src/lib/isFunction.ts","webpack:///libs/akita/src/lib/resetStores.ts","webpack:///libs/akita/src/lib/getEntity.ts","webpack:///libs/akita/src/lib/isEmpty.ts","webpack:///apps/angular-store-app/src/app/cart/state/cart.query.ts","webpack:///libs/akita/src/lib/sort.ts","webpack:///libs/akita/src/lib/arrayToggle.ts","webpack:///libs/akita/src/lib/sortByOptions.ts","webpack:///apps/angular-store-app/src/app/app.component.ts","webpack:///apps/angular-store-app/src/app/app.component.html","webpack:///libs/akita/src/lib/dispatchers.ts"],"names":["createInitialRouterState","state","navigationId","RouterStore","name","providedIn","ProductPageComponent","activatedRoute","productsService","productsQuery","product$","selectEntity","productId","paramMap","pipe","params","get","id","hasEntity","getProduct","subscribe","snapshot","template","EntityDirtyCheckPlugin","query","entityIds","_someDirty","someDirty$","select","entities","asObservable","checkSomeDirty","activate","selectIds","ids","afterAdd","plugin","setHead","toArray","someAreWatched","some","indexOf","forEachId","e","next","has","entity","getEntity","hasHead","reset","isDirty$","isDirty","path","head","getHead","current","currentPathValue","headPathValue","comparator","destroy","complete","entitiesIds","resolvedIds","ProductsStore","active","ProductsQuery","store","term","sortBy","selectAll","filterBy","title","toLowerCase","includes","PersistNgFormPlugin","factoryFnOrPath","debounceTime","formKey","emitEvent","arrControlFactory","v","builder","control","isRootKeys","isKeyBased","form","initialState","value","initialValue","Object","keys","forEach","stateKey","Array","isArray","formArray","controls","cleanArray","i","insert","patchValue","storeValue","getQuery","getValue","getStore","storeName","updateStore","length","removeAt","formValue","root","reduce","acc","factory","resolveInitialValue","formChanges","valueChanges","newState","unsubscribe","toEntitiesObject","idKey","preAddEntity","push","publicApi","ProductsModule","forFeature","imports","declarations","exports","Store","options","inTransaction","cache","ttl","onInit","loading","_value","_setState","hasCache","restartTTL","ttlConfig","getCacheTTL","clearTimeout","setTimeout","setHasCache","error","project","_dispatchAction","_newState","deepFreeze","action","handleTransaction","dispatch","isResettable","assign","_initialState","console","warn","stateOrCallback","currentState","_producerFn","withHook","akitaPreUpdate","resolved","constructor","newOptions","_","nextState","hmrEnabled","window","undefined","resettable","watchTransaction","cacheConfig","config","deepFreezeFn","producerFn","isBrowser","isNotBrowser","hasLocalStorage","localStorage","hasSessionStorage","sessionStorage","CartComponent","cartQuery","actions","items$","selectItems$","total$","selectTotal$","notify$","selectNotification$","removeItem","selector","changeDetection","OnPush","templateUrl","addEntities","newEntities","newIds","hasNewEntities","entityId","prepend","unshift","paginatorDefaults","pagesControls","range","startWith","cacheTimeout","clearStoreWithCache","PaginatorPlugin","resetFn","initial","clearCache","currentPage","metadata","Map","pages","pagination","perPage","total","lastPage","data","isLoading$","selectLoading","page","clearCacheSubscription","setLoading","response","addPage","set","map","upsertMany","clearStore","remove","setPage","hasPage","req","selectPage","update","clearPage","isFirst","isLast","asObject","isNaN","from","getFrom","to","getTo","pageControls","generatePages","len","Math","ceil","arr","Paginator","__stores__","__queries__","$$stores","$$queries","LoginComponent","fb","router","authService","login","group","email","password","navigate","submit","DEVTOOLS_OPTIONS","AkitaDevtools","ngZone","d","init","akitaDevtools","AkitaNgDevtools","ngModule","providers","provide","useValue","useFactory","deps","multi","entitiesToMap","limitTo","hasLimit","count","allPass","every","fn","finalLength","min","mapResponse","res","mappedResponse","mapResponseFn","NgEntityService","http","loader","notifier","globalConfig","mergedConfig","getDecoratorConfig","baseUrl","httpMethodMap","httpMethods","dispatchSuccess","dispatchError","idOrConfig","method","getHttpMethod","GET","isSingle","conf","url","resolveUrl","request","skipWrite","upsert","append","add","payload","successMsg","handleError","errorMsg","POST","configWithBody","body","responseEntity","PUT","DELETE","type","httpMethod","Error","key","getDecoratorValue","resourceName","urlPostfix","final","api","slice","section","source","RouterQuery","__navigationCancel","__navigationError","names","p","sources","queryParams","fragment","navigationExtras","coerceArray","isNil","AkitaNgEffectsModule","rootEffects","createEffectInstances","featureEffects","injector","effectGroups","moduleManager","mergedEffects","effectGroup","effectInstances","effect","find","collection","idsOrPredicate","result","toSet","Set","distinctUntilArrayItemChanged","prevCollection","currentCollection","isOneOfItemReferenceChanged","item","arrayFind","isUndefined","setLoadingAndError","setError","err","ProductsComponent","cartService","search","sortControl","loading$","products$","getProducts","addProductToCart","subtract","createCartItem","quantity","createEffect","actions$","AkitaError","message","assertStoreHasName","className","cacheable","request$","emitNext","_cache","CartEffects","cartStore","removeItem$","removeItemSuccess","notify","getInitialEntitiesState","SnapshotManager","stores","hasInclude","mergedOptions","skipStorageUpdate","lazy","normalizedStores","JSON","parse","size","hasOwnProperty","snapshotManager","_ROOT_EFFECTS","ROOT_EFFECT_INSTANCES","_FEATURE_EFFECTS","FEATURE_EFFECT_INSTANCES","AuthGuard","authQuery","isLoggedIn$","isAuth","navigateByUrl","mapSkipUndefined","callbackFn","index","array","val","QueryEntity","__store__","getAll","idOrPredicate","getActive","selectActiveId","selectMany","activeId","getActiveId","predicate","getCount","filter","selectAt","actionOrActions","selectEntityAction$","projectOrIds","isIdProvided","ui","EntityUIQuery","mapFn","ProductsService","productsStore","product","AkitaNgRouterStoreModule","routerService","routes","component","pathMatch","canActivate","loadChildren","then","m","TodosModule","ContactsModule","StoriesModule","MoviesModule","WidgetsModule","PostsModule","AppRoutingModule","forRoot","EntityStateHistoryPlugin","maxAge","redo","undo","hasPast","hasFuture","jumpToFuture","jumpToPast","customUpdateFn","clear","clearHistory","ignoreNext","AuthModule","environment","production","AkitaPlugin","onReset","property","isEntityBased","withStoreName","prop","replace","original","apply","CartActions","test","entitiesToArray","sortByOrder","_sortBy","sort","a","b","ProductsEffects","allActionsProducts","log","toBoolean","ModuleManager","effectInstanceSources","WeakSet","destroyEffects$","effectInstance","isEffect","actionOrSkip","dispatchAction","checkAction","TypeError","guid","random","toString","o","freeze","oIsFunction","hasOwnProp","prototype","getOwnPropertyNames","call","isFrozen","CONFIG","akitaConfig","getAkitaConfig","getGlobalProducerFn","removeEntities","removeAllEntities","updateEntities","newStateOrFn","preUpdateEntity","onEntityIdChanges","updatedEntities","isUpdatingIdKey","idToUpdate","oldEntity","isIdChanged","newEntity","merged","updatedIds","stateEntities","deletedEntity","rest","storage","include","AuthQuery","user","token","ProductComponent","setMetadata","propertyName","effectOptions","defineProperty","enumerable","configurable","writable","createInitialState","firstName","lastName","AuthStore","LoginModule","combineQueries","observables","NavComponent","navItems","count$","selectCount","logout","CartService","findItem","updateQuantity","Effect","classProto","propKey","returnValue","currentAction","skip","customActionActive","resetCustomAction","logAction","setAction","setSkipAction","target","propertyKey","descriptor","originalMethod","args","StoreAction","StoreActionMapping","Update","EntityStoreAction","EntityStoreActionMapping","AddEntities","SetEntities","UpdateEntities","RemoveEntities","UpsertEntities","UpsertManyEntities","storeClass","getStoreByName","getEntityStore","getEntityStoreByName","runStoreAction","storeClassOrName","operation","bind","runEntityStoreAction","setValue","obj","split","lastIndex","removeStoreName","part","AuthEffects","authStore","allActionsAuth","dirtyCheckDefaultParams","stringify","getNestedPath","nestedObj","pathAsArray","DirtyCheckPlugin","_entityId","dirty","_reset","reset$","watchProperty","watchProp","currentValue","updateFn","_getHead","updateDirtiness","subscription","__akitaKey","selectSource","isChange","compareTo","getSource","getWatchedValues","watched","EntityActions","arrayAdd","toArr","Query","_select","func","k","isID","RouterService","routerStore","routerQuery","dispatchTriggeredByRouter","navigationTriggeredByDispatch","event","lastRouterState","setUpStoreListener","setUpStateRollbackEvents","routerState","s","navigateIfNeeded","events","serializeRoute","dispatchRouterCancel","dispatchRouterError","dispatchRouterSuccess","navigationEvent","firstChild","urlAfterRedirects","getCurrentNavigation","extras","isPlainObject","isNumber","parseFloat","transactionFinished","transactionInProcess","transactionManager","activeTransactions","batchTransaction","startBatch","isTransactionInProcess","endBatch","commit","applyTransaction","thisArg","transaction","withTransaction","__DEV__","enableAkitaProdMode","isDev","arrayRemove","identifier","identifiers","filterFn","arrayUpdate","predicateOrIds","condition","subs","ngZoneOrOptions","__REDUX_DEVTOOLS_EXTENSION__","isAngular","run","cb","defaultOptions","shallow","storesWhitelist","devTools","connect","appState","isAllowed","send","isEqual","normalize","msg","logTrace","trace","groupEnd","sortAlphabetically","sortedAppState","payloadType","rootState","isDefined","toEntitiesIds","NgEntityServiceLoader","dispatcher","filterStore","filterMethod","mthd","actionBased","idBased","get$","add$","update$","PATCH","delete$","updateEntity","deleteEntity","not","pred","products","description","price","HttpMethod","ofType","NgEntityServiceNotifier","action$","compareKeys","keysOrFuncs","prevState","currState","isFns","keyOrFunc","arrayUpsert","entityIsObject","entityExists","trackIdChanges","lift","TrackIdChanges","subscriber","currId","pending","newId","oldId","selectEntityIdChanges$","change","join","AuthService","creds","simulateRequest","webpackEmptyAsyncContext","Promise","resolve","code","module","successAction","errorAction","getActiveEntities","idOrOptions","currentActive","wrap","currentIdIndex","prev","CartModule","Actions","props","hasPayload","_persistStateInit","selectPersistStateInit","setSkipStorageUpdate","getSkipStorageUpdate","isPromise","observify","asyncOrValue","persistState","defaults","enableInNonBrowser","deserialize","serialize","persistOnDestroy","preStorageUpdate","preStoreUpdate","preStorageUpdateOperator","hasSelect","includeStores","selectStores","fns","selectFn","subscriptions","buffer","_save","shift","isLocalStorage","getItem","storageState","save","storeCache","setItem","setInitial","passPredicate","EntityCollectionPlugin","getIds","beforeAdd","instantiatePlugin","beforeRemove","removeEntity","_ids","createEntity","rebase","StateHistoryPlugin","history","past","present","future","skipUpdate","hasFutureSubject","hasPastSubject","_hasPast$","_hasFuture$","shouldUpdate","updateHasHistory","previous","newFuture","newPast","newPresent","n","CartStore","operand","newQuantity","configKey","StoreConfig","isObject","EntityService","DEFAULT_ID_KEY","filterNil","filterNilValue","capitalize","charAt","toUpperCase","queryConfigKey","QueryConfig","isEntityState","applyMiddleware","mapped","setEntities","isNativePreAdd","Number","isString","hasActiveState","isMultiActiveState","resolveActiveEntity","getExitingActives","currentActivesIds","filtered","EffectsRootModule","parentModule","rootGuard","subscribeToEffects","createStore","createQuery","createEntityStore","createEntityQuery","EffectsFeatureModule","NG_ENTITY_SERVICE_CONFIG","defaultConfig","mergeDeep","NgEntityServiceConfig","EntityStore","entityActions","entityIdChanges","akitaPreAddEntity","hasInitialUIState","handleUICreation","Add","idsOrFnOrState","entityIdChanged","akitaPreUpdateEntity","onCreate","isUpdate","baseClass","isClassBased","updateIds","newStateObj","withId","addedIds","withPreCheckHook","akitaPreCheckEntity","nextId","hasUIStore","replaced","splice","idsOrFn","idPassed","handleUIRemove","Remove","newStateOrCallback","_setActive","everyExist","uniques","someExist","currentId","filterExists","removeActive","addActive","storeConfig","EntityUIStore","nextEntity","isFunc","_akitaCreateEntityFn","uiEntities","createFn","T","AppModule","bootstrap","isFunction","resetStores","exclude","findEntityByPredicate","isEmpty","CartQuery","joinItems","bufferSize","refCount","items","cartItems","cartItem","Order","compareValues","order","ASC","varA","varB","comparison","DESC","byKey","byId","arrayToggle","newValue","compare","findIndex","oldValue","sortByOptions","AppComponent","r","$$deleteStore","$$addStore","$$updateStore","dispatchDeleted","dispatchAdded","dispatchUpdate"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Store, StoreConfig, HashMap } from '@datorama/akita';\n\nexport type ActiveRouteState = {\n  url: string;\n  urlAfterRedirects: string;\n  fragment: string;\n  params: HashMap<any>;\n  queryParams: HashMap<any>;\n  data: HashMap<any>;\n  navigationExtras: HashMap<any> | undefined;\n};\n\nexport type RouterState = {\n  state: ActiveRouteState | null;\n  navigationId: number | null;\n};\n\nexport function createInitialRouterState(): RouterState {\n  return {\n    state: null,\n    navigationId: null\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'router' })\nexport class RouterStore extends Store<RouterState> {\n  constructor() {\n    super(createInitialRouterState());\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { ProductsQuery } from '../products/state/products.query';\nimport { ProductsService } from '../products/state/products.service';\n\n@UntilDestroy()\n@Component({\n  template: `\n    <div *ngIf=\"product$ | async as product\" class=\"padding\">\n      <h1>{{ product.title }}</h1>\n      <h6>{{ product.description }}</h6>\n    </div>\n  `,\n})\nexport class ProductPageComponent implements OnInit, OnDestroy {\n  product$ = this.productsQuery.selectEntity(this.productId);\n\n  constructor(private activatedRoute: ActivatedRoute, private productsService: ProductsService, private productsQuery: ProductsQuery) {}\n\n  ngOnInit() {\n    this.activatedRoute.paramMap\n      .pipe(\n        map((params) => params.get('id')),\n        filter((id) => !this.productsQuery.hasEntity(id)),\n        untilDestroyed(this),\n        switchMap((id) => this.productsService.getProduct(id))\n      )\n      .subscribe();\n  }\n\n  get productId() {\n    return this.activatedRoute.snapshot.params.id;\n  }\n\n  ngOnDestroy() {}\n}\n","import { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './dirtyCheckPlugin';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { auditTime, map, skip } from 'rxjs/operators';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { EntityState, OrArray, getIDType, getEntityType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { coerceArray } from '../../coerceArray';\n\nexport type DirtyCheckCollectionParams<State extends EntityState> = {\n  comparator?: DirtyCheckComparator<getEntityType<State>>;\n  entityIds?: OrArray<getIDType<State>>;\n};\n\nexport class EntityDirtyCheckPlugin<State extends EntityState = any, P extends DirtyCheckPlugin<State> = DirtyCheckPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  private _someDirty = new Subject();\n  someDirty$: Observable<boolean> = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(\n    auditTime(0),\n    map(() => this.checkSomeDirty())\n  );\n\n  constructor(protected query: QueryEntity<State>, private readonly params: DirtyCheckCollectionParams<State> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        super.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: OrArray<getIDType<State>>) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids) as getIDType<State>[];\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next();\n    return this;\n  }\n\n  hasHead(id: getIDType<State>): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: OrArray<getIDType<State>>, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: getIDType<State>): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: true): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: false): boolean;\n  isDirty(id: getIDType<State>, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  someDirty(): boolean {\n    return this.checkSomeDirty();\n  }\n\n  isPathDirty(id: getIDType<State>, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n\n  protected instantiatePlugin(id: getIDType<State>): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from './products.model';\nimport { EntityState, EntityStore, MultiActiveState, StoreConfig } from '@datorama/akita';\n\nexport interface ProductsState extends EntityState<Product>, MultiActiveState {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'products' })\nexport class ProductsStore extends EntityStore<ProductsState> {\n  constructor() {\n    super({ active: [] });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductsState, ProductsStore } from './products.store';\nimport { Product } from './products.model';\nimport { QueryConfig, QueryEntity } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\n@QueryConfig({ sortBy: 'price' })\nexport class ProductsQuery extends QueryEntity<ProductsState> {\n  constructor(protected store: ProductsStore) {\n    super(store);\n  }\n\n  getProducts(term: string, sortBy: keyof Product) {\n    return this.selectAll({\n      sortBy,\n      filterBy: entity => entity.title.toLowerCase().includes(term)\n    });\n  }\n}\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getValue() as AkitaFormProp<T>)[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","import { PreAddEntity } from './types';\n\n// @internal\nexport function toEntitiesObject<E>(entities: E[], idKey: string, preAddEntity: PreAddEntity<E>) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n\n  return acc;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProductsComponent } from './products.component';\nimport { ProductComponent } from './product/product.component';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\nimport { ProductsEffects } from './state/products.effects';\n\nconst publicApi = [ProductsComponent, ProductComponent];\n\n@NgModule({\n  imports: [CommonModule, RouterModule, ReactiveFormsModule, AkitaNgEffectsModule.forFeature([ProductsEffects])],\n  declarations: [publicApi],\n  exports: [publicApi],\n})\nexport class ProductsModule {}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { currentAction, resetCustomAction, setAction, StoreSnapshotAction } from './actions';\nimport { getAkitaConfig, getGlobalProducerFn } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { isDev, __DEV__ } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey, StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { commit, isTransactionInProcess } from './transaction';\nimport { StoreCache, UpdateStateCallback } from './types';\nimport { Injectable } from '@angular/core';\n\ninterface StoreSnapshot<S> {\n  state: S;\n  action?: StoreSnapshotAction;\n}\n\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\n@Injectable()\nexport class Store<S = any> {\n  private store: BehaviorSubject<Readonly<StoreSnapshot<S>>>;\n  private storeValue: S;\n  private inTransaction = false;\n  private _initialState: S;\n  protected cache: StoreCache = {\n    active: new BehaviorSubject<boolean>(false),\n    ttl: null,\n  };\n\n  constructor(initialState: Partial<S>, protected options: Partial<StoreConfigOptions> = {}) {\n    this.onInit(initialState as S);\n  }\n\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && setAction('Set Loading');\n      this._setState((state) => ({ ...state, loading } as S & { loading: boolean }));\n    }\n  }\n\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache: boolean, options: { restartTTL: boolean } = { restartTTL: false }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = <any>setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && setAction('Set Error');\n      this._setState((state) => ({ ...state, error } as S & { error: any }));\n    }\n  }\n\n  // @internal\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store.asObservable().pipe(\n      map((snapshot) => project(snapshot.state)),\n      distinctUntilChanged()\n    );\n  }\n\n  // @internal\n  _value(): S {\n    return this.storeValue;\n  }\n\n  // @internal\n  _cache(): BehaviorSubject<boolean> {\n    return this.cache.active;\n  }\n\n  // @internal\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey] || {};\n  }\n\n  // @internal\n  get storeName() {\n    return (this.config as StoreConfigOptions & { storeName: string }).storeName || (this.options as StoreConfigOptions & { storeName: string }).storeName || this.options.name;\n  }\n\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n\n  get _producerFn() {\n    return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();\n  }\n\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n\n  // @internal\n  _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction = true) {\n    if (isFunction(newState)) {\n      const _newState = newState(this._value());\n      this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;\n    } else {\n      this.storeValue = newState;\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject({ state: this.storeValue });\n\n      if (isDev()) {\n        this.store.subscribe(({ action }) => {\n          if (action) {\n            dispatchUpdate(this.storeName, action);\n          }\n        });\n      }\n\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    } else {\n      isDev() && console.warn(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   *\n   * Update the store's value\n   *\n   * @example\n   *\n   * this.store.update(state => {\n   *   return {...}\n   * })\n   */\n  update(stateCallback: UpdateStateCallback<S>);\n  /**\n   *\n   * @example\n   *\n   *  this.store.update({ token: token })\n   */\n  update(state: Partial<S>);\n  update(stateOrCallback: Partial<S> | UpdateStateCallback<S>) {\n    isDev() && setAction('Update');\n\n    let newState;\n    const currentState = this._value();\n    if (isFunction(stateOrCallback)) {\n      newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);\n    } else {\n      newState = stateOrCallback;\n    }\n\n    const withHook = this.akitaPreUpdate(currentState, { ...currentState, ...newState } as S);\n    const resolved = isPlainObject(currentState) ? withHook : new (currentState as any).constructor(withHook);\n    this._setState(resolved);\n  }\n\n  updateStoreConfig(newOptions: UpdatableStoreConfigOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  // @internal\n  akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S {\n    return nextState;\n  }\n\n  /**\n   *\n   * @deprecated\n   *\n   * This method will be removed in v7\n   *\n   * Akita isn't coupled to Angular and should not use Angular\n   * specific code\n   *\n   */\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? (window as any).hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n      this.store.complete();\n    }\n  }\n\n  private onInit(initialState: S) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n\n  private dispatch(state: S, _dispatchAction = true) {\n    let action: StoreSnapshotAction | undefined = undefined;\n\n    if (_dispatchAction) {\n      action = currentAction;\n      resetCustomAction();\n    }\n\n    this.store.next({ state, action });\n  }\n\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n\n  private isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private getCacheTTL() {\n    return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;\n  }\n}\n","export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\n// export const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined'; TODO is this used?\nexport const hasLocalStorage = () => {\n  try {\n    return typeof localStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n};\nexport const hasSessionStorage = () => {\n  try {\n    return typeof sessionStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n};\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../products/state/products.model';\nimport { CartQuery } from './state/cart.query';\nimport { CartItem } from './state/cart.model';\nimport { Actions } from '@datorama/akita-ng-effects';\nimport { CartActions } from './state/cart.actions';\n\n@Component({\n  selector: 'app-cart',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './cart.component.html'\n})\nexport class CartComponent implements OnInit {\n  items$: Observable<(CartItem & Product)[]>;\n  total$: Observable<number>;\n  notify$: Observable<boolean>;\n\n  constructor(private cartQuery: CartQuery, private actions: Actions) {\n  }\n\n  ngOnInit() {\n    this.items$  = this.cartQuery.selectItems$;\n    this.total$  = this.cartQuery.selectTotal$;\n    this.notify$ = this.cartQuery.selectNotification$;\n  }\n\n  remove({ productId }: CartItem) {\n    this.actions.dispatch(CartActions.removeItem({ productId }));\n  }\n}\n","<section class=\"padding\">\n  <ng-container *ngIf=\"items$ | async as items\">\n    <table class=\"striped\" *ngIf=\"items.length\">\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Description</th>\n          <th>Quantity</th>\n          <th>Total</th>\n          <th>Remove</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let item of items\">\n          <td>{{item.title}}</td>\n          <td>{{item.description}}</td>\n          <td>{{item.quantity}}</td>\n          <th>{{item.total}}$</th>\n          <th>\n            <button (click)=\"remove(item)\" class=\"btn waves-effect waves-light red\">\n              <i class=\"material-icons\">delete_forever</i>\n            </button>\n          </th>\n        </tr>\n      </tbody>\n    </table>\n\n    <h3 *ngIf=\"!items.length\">Your cart is empty</h3>\n\n    <h4 *ngIf=\"items.length\" class=\"flex align-center\">\n      <i class=\"material-icons medium mr5\">credit_card</i>\n      Total: {{total$ | async}}$\n    </h4>\n\n  </ng-container>\n\n</section>","import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n","import { BehaviorSubject, from, isObservable, Observable, Subscription } from 'rxjs';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\nimport { isUndefined } from '../../isUndefined';\nimport { QueryEntity } from '../../queryEntity';\nimport { applyTransaction } from '../../transaction';\nimport { EntityState, getEntityType, ID } from '../../types';\nimport { AkitaPlugin } from '../plugin';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n  clearStoreWithCache?: boolean;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true,\n};\n\nexport class PaginatorPlugin<State extends EntityState> extends AkitaPlugin<State> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<getEntityType<State>> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: [],\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = true;\n\n  constructor(protected query: QueryEntity<State>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      },\n    });\n    this.config = { ...paginatorDefaults, ...config };\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action('@Pagination - New Page')\n  update(response: PaginationResponse<getEntityType<State>>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: getEntityType<State>[]) {\n    this.pages.set(this.currentPage, { ids: data.map((entity) => entity[this.getStore().idKey]) });\n    this.getStore().upsertMany(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache(options: { clearStore?: boolean } = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<getEntityType<State>>>) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<getEntityType<State>>) => {\n          page = config.currentPage;\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<State> {\n    return this.query;\n  }\n\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<getEntityType<State>>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map((entities) => {\n        const response: PaginationResponse<getEntityType<State>> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map((id) => entities[id]),\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { Query } from './query';\nimport { isBrowser } from './root';\nimport { Store } from './store';\n\n// @internal\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\n// @internal\nexport const __queries__: { [storeName: string]: Query<any> } = {};\n\nif (isBrowser) {\n  (window as any).$$stores = __stores__;\n  (window as any).$$queries = __queries__;\n}\n","export { action, currentAction, logAction, resetCustomAction, setAction, setSkipAction } from './actions';\nexport { getExitingActives, hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\nexport { addEntities, AddEntitiesOptions, AddEntitiesParams } from './addEntities';\nexport { arrayAdd } from './arrayAdd';\nexport { arrayFind, distinctUntilArrayItemChanged, find } from './arrayFind';\nexport { arrayRemove } from './arrayRemove';\nexport { arrayToggle, byId, byKey } from './arrayToggle';\nexport { arrayUpdate } from './arrayUpdate';\nexport { arrayUpsert } from './arrayUpsert';\nexport { cacheable } from './cacheable';\nexport { coerceArray } from './coerceArray';\nexport { combineQueries } from './combineQueries';\nexport { AkitaConfig, akitaConfig, getAkitaConfig } from './config';\nexport { DEFAULT_ID_KEY } from './defaultIDKey';\nexport { akitaDevtools, DevtoolsOptions, NgZoneLike } from './devtools';\nexport * from './dispatchers';\nexport { entitiesToArray } from './entitiesToArray';\nexport { entitiesToMap } from './entitiesToMap';\nexport * from './entityActions';\nexport { EntityService } from './entityService';\nexport { EntityStore, EntityUIStore } from './entityStore';\nexport { enableAkitaProdMode, isDev, __DEV__ } from './env';\nexport { filterNil, filterNilValue } from './filterNil';\nexport { createEntityQuery, createEntityStore, createQuery, createStore } from './fp';\nexport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nexport { getInitialEntitiesState } from './getInitialEntitiesState';\nexport { getValue } from './getValueByString';\nexport { guid } from './guid';\nexport { hasEntity } from './hasEntity';\nexport { isArray } from './isArray';\nexport { isDefined } from './isDefined';\nexport { isEmpty } from './isEmpty';\nexport { isFunction } from './isFunction';\nexport { isNil } from './isNil';\nexport { isNumber } from './isNumber';\nexport { isObject } from './isObject';\nexport { isPlainObject } from './isPlainObject';\nexport { isString } from './isString';\nexport { isUndefined } from './isUndefined';\nexport { persistState, PersistState, PersistStateParams, PersistStateSelectFn, selectPersistStateInit } from './persistState';\nexport { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './plugins/dirtyCheck/dirtyCheckPlugin';\nexport { DirtyCheckCollectionParams, EntityDirtyCheckPlugin } from './plugins/dirtyCheck/entityDirtyCheckPlugin';\nexport { EntityCollectionPlugin, RebaseActions } from './plugins/entityCollectionPlugin';\nexport { PaginationResponse, Paginator, PaginatorConfig, PaginatorPlugin } from './plugins/paginator/paginatorPlugin';\nexport { AkitaFormProp, ArrayControlFactory, FormGroupLike, PersistFormParams, PersistNgFormPlugin } from './plugins/persistForm/persistNgFormPlugin';\nexport { AkitaPlugin, Queries } from './plugins/plugin';\nexport { EntityStateHistoryPlugin, StateHistoryEntityParams } from './plugins/stateHistory/entityStateHistoryPlugin';\nexport { StateHistoryParams, StateHistoryPlugin } from './plugins/stateHistory/stateHistoryPlugin';\nexport { Query } from './query';\nexport { QueryConfig, queryConfigKey, QueryConfigOptions, SortBy, SortByOptions } from './queryConfig';\nexport { EntityUIQuery, QueryEntity } from './queryEntity';\nexport { removeAllEntities, removeEntities, RemoveEntitiesParams } from './removeEntities';\nexport { resetStores, ResetStoresParams } from './resetStores';\nexport { isNotBrowser } from './root';\nexport { EntityStoreAction, getEntityStore, getEntityStoreByName, getStore, getStoreByName, runEntityStoreAction, runStoreAction, StoreAction } from './runStoreAction';\nexport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nexport { isEntityState, setEntities, SetEntitiesParams } from './setEntities';\nexport { setLoading } from './setLoading';\nexport { setLoadingAndError } from './setLoadingAndError';\nexport { setValue } from './setValueByString';\nexport { SnapshotManager, snapshotManager } from './snapshotManager';\nexport { compareValues, Order } from './sort';\nexport { sortByOptions } from './sortByOptions';\nexport { Store } from './store';\nexport { configKey, StoreConfig, StoreConfigOptions } from './storeConfig';\nexport { __stores__ } from './stores';\nexport { toBoolean } from './toBoolean';\nexport { toEntitiesIds } from './toEntitiesIds';\nexport { toEntitiesObject } from './toEntitiesObject';\nexport { trackIdChanges } from './trackIdChanges';\nexport { applyTransaction, commit, endBatch, isTransactionInProcess, startBatch, transaction, TransactionManager, transactionManager, withTransaction } from './transaction';\nexport * from './types';\nexport { updateEntities, UpdateEntitiesParams } from './updateEntities';\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { AuthService, Creds } from '../state/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './login.component.html'\n})\nexport class LoginComponent implements OnInit {\n  login: FormGroup;\n\n  constructor(private fb: FormBuilder, private router: Router, private authService: AuthService) {}\n\n  ngOnInit(): void {\n    this.login = this.fb.group({\n      email: this.fb.control(''),\n      password: this.fb.control('')\n    });\n  }\n\n  submit() {\n    this.authService.login(this.login.value as Creds).subscribe(() => {\n      this.router.navigate(['/']);\n    });\n  }\n}\n","<div class=\"row padding\" style=\"width: 50%; margin: auto;\">\n  <form class=\"col s12\" [formGroup]=\"login\" (submit)=\"submit()\">\n    <div class=\"row\">\n      <div class=\"input-field\">\n        <i class=\"material-icons prefix\">email</i>\n        <input id=\"icon_prefix\" type=\"text\" class=\"validate\" formControlName=\"email\">\n        <label for=\"icon_prefix\">Email</label>\n      </div>\n      <div class=\"input-field\">\n        <i class=\"material-icons prefix\">lock_open</i>\n        <input id=\"icon_telephone\" type=\"tel\" class=\"validate\" formControlName=\"password\">\n        <label for=\"icon_telephone\">Password</label>\n      </div>\n    </div>\n\n    <button class=\"btn waves-effect waves-light flex\" style=\"margin-left: auto;\" type=\"submit\">Submit\n      <i class=\"material-icons right\">send</i>\n    </button>\n\n  </form>\n</div>","import { APP_INITIALIZER, ModuleWithProviders, NgModule, NgZone, InjectionToken, Inject, Injectable } from '@angular/core';\nimport { akitaDevtools, DevtoolsOptions } from '@datorama/akita';\n\nexport const DEVTOOLS_OPTIONS = new InjectionToken<DevtoolsOptions>('DevtoolsOptions');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AkitaDevtools {\n  constructor(private ngZone: NgZone, @Inject(DEVTOOLS_OPTIONS) private options: DevtoolsOptions) {\n    akitaDevtools(this.ngZone, this.options);\n  }\n}\n\n// auto initialize the devtools\nexport function d() {}\n\nexport function init(akitaDevtools: AkitaDevtools) {\n  return d;\n}\n\n@NgModule({})\nexport class AkitaNgDevtools {\n  public static forRoot(options?: Partial<DevtoolsOptions>): ModuleWithProviders<AkitaNgDevtools> {\n    return {\n      ngModule: AkitaNgDevtools,\n      providers: [\n        {\n          provide: DEVTOOLS_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: init,\n          deps: [AkitaDevtools],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { EntityState } from './types';\nimport { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToMap<S extends EntityState<E>, E>(state: S, options) {\n  const map = {};\n  const { filterBy, limitTo } = options;\n  const { ids, entities } = state;\n\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n\n  return map;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { EntityService, EntityState, EntityStore, getEntityType, getIDType, isDefined } from '@datorama/akita';\nimport { isObservable, Observable, of, throwError } from 'rxjs';\nimport { catchError, finalize, switchMap, tap } from 'rxjs/operators';\nimport { errorAction, successAction } from './action-factory';\nimport { isID } from './helpers';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { defaultConfig, mergeDeep, NgEntityServiceGlobalConfig, NG_ENTITY_SERVICE_CONFIG } from './ng-entity-service.config';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport { HttpAddConfig, HttpConfig, HttpDeleteConfig, HttpGetConfig, HttpUpdateConfig, NgEntityServiceParams } from './types';\n\nexport const mapResponse = <T>(config?: HttpConfig<T>) =>\n  switchMap((res) => {\n    const mappedResponse = !!config?.mapResponseFn ? config.mapResponseFn(res) : res;\n\n    return isObservable(mappedResponse) ? mappedResponse : of(mappedResponse);\n  });\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string | undefined;\n  loader: NgEntityServiceLoader;\n\n  private readonly http: HttpClient;\n  private readonly notifier: NgEntityServiceNotifier;\n  private readonly mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n  private readonly httpMethodMap:\n    | Partial<{\n        GET: HttpMethod;\n        POST: HttpMethod;\n        PATCH: HttpMethod;\n        PUT: HttpMethod;\n        DELETE: HttpMethod;\n      }>\n    | undefined;\n\n  private readonly dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private readonly dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected readonly store: EntityStore<S>, readonly config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    const globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n    this.mergedConfig = mergeDeep({}, defaultConfig, globalConfig, this.getDecoratorConfig(), config);\n    this.baseUrl = this.mergedConfig.baseUrl;\n    this.httpMethodMap = this.mergedConfig.httpMethods;\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    if (!this.baseUrl) {\n      throw new Error(`baseUrl of ${this.constructor.name} is not defined.`);\n    }\n\n    return `${this.baseUrl}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.mergedConfig.resourceName || this.store.storeName;\n  }\n\n  setBaseUrl(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   * Get one entity - Creates a GET request\n   *\n   * @example\n   * service.get(id).subscribe()\n   * service.get(id, { headers, params, url }).subscribe()\n   */\n  get<T>(id?: getIDType<S>, config?: HttpGetConfig<T>): Observable<T>;\n  /**\n   * Get all entities - Creates a GET request\n   *\n   * @example\n   * service.get().subscribe()\n   * service.get({ headers, params, url }).subscribe()\n   */\n  get<T>(config?: HttpGetConfig<T>): Observable<T>;\n  get<T>(idOrConfig?: getIDType<S> | HttpGetConfig<T>, config?: HttpGetConfig<T>): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.GET);\n    const isSingle = isID(idOrConfig);\n    const entityId = isSingle ? (idOrConfig as getIDType<S>) : undefined;\n    const conf = (!isSingle ? (idOrConfig as HttpGetConfig<T>) : config) || {};\n    const url = this.resolveUrl(conf, entityId);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, conf).pipe(\n      mapResponse(conf),\n      tap((data: any) => {\n        if (!conf.skipWrite) {\n          if (isSingle) {\n            this.store.upsert(entityId, data, (id, newState) => ({ id, ...newState }));\n          } else {\n            if (conf.append) {\n              this.store.add(data);\n            } else if (conf.upsert) {\n              this.store.upsertMany(data);\n            } else {\n              this.store.set(data);\n            }\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: conf.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, conf.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Add a new entity - Creates a POST request\n   *\n   * @example\n   * service.add(entity).subscribe()\n   * service.add(entity, config).subscribe()\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpAddConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config);\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity: any) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.add(responseEntity, config);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * @example\n   * service.update(id, entity).subscribe()\n   * service.update(id, entity, config).subscribe()\n   */\n  update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config?: HttpUpdateConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = (config && config.method) || this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.update(id, responseEntity as any);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Delete an entity - Creates a DELETE request\n   *\n   * @example\n   * service.delete(id).subscribe()\n   * service.delete(id, config).subscribe()\n   */\n  delete<T>(id: getIDType<S>, config?: HttpDeleteConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, config).pipe(\n      mapResponse(config),\n      tap((res) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.remove(id);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Gets the mapped HttpMethod.\n   *\n   * The default HttpMethod can be changed like so:\n   * ```ts\n   * {\n   *   provide: NG_ENTITY_SERVICE_CONFIG,\n   *   useValue: {\n   *     httpMethods: {\n   *       PUT: HttpMethod.PATCH,\n   *     },\n   *   } as NgEntityServiceGlobalConfig,\n   * }\n   * ```\n   *\n   * @param type HttpMethod to get the user configured HttpMethod for\n   * @returns User configured HttpMethod for the method, else the default HttpMethod\n   */\n  protected getHttpMethod(type: HttpMethod) {\n    let httpMethod: HttpMethod;\n    if (this.httpMethodMap) {\n      httpMethod = this.httpMethodMap[type];\n    }\n    if (!httpMethod) {\n      throw new Error('Unknown HttpMethod');\n    }\n\n    return httpMethod;\n  }\n\n  /**\n   * Gets the value given via the NgEntityServiceConfig decorator\n   *\n   * ```ts\n   * @NgEntityServiceConfig({\n   *   baseUrl: 'foo',\n   *   resourceName: 'bar',\n   * })\n   * ```\n   *\n   * @param key The property key\n   * @returns The value of the given decorator key\n   */\n  private getDecoratorValue(key: keyof NgEntityServiceParams): string | undefined {\n    return (this.constructor as any)[key];\n  }\n\n  protected getDecoratorConfig() {\n    const config: NgEntityServiceParams = {};\n\n    const baseUrl = this.getDecoratorValue('baseUrl');\n    if (baseUrl) {\n      config.baseUrl = baseUrl;\n    }\n\n    const resourceName = this.getDecoratorValue('resourceName');\n    if (resourceName) {\n      config.resourceName = resourceName;\n    }\n\n    return config;\n  }\n\n  protected resolveUrl(config?: HttpConfig, id?: any) {\n    const { url, urlPostfix } = Object(config) as HttpConfig;\n    let final = this.api;\n\n    if (url) {\n      return url;\n    }\n\n    if (isDefined(id)) {\n      final += `/${id}`;\n    }\n\n    if (urlPostfix) {\n      final += `/${urlPostfix}`;\n    }\n\n    return final;\n  }\n\n  protected handleError(method: HttpMethod, error: any, errorMsg?: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error,\n    });\n\n    return throwError(error);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { filterNilValue, Query } from '@datorama/akita';\nimport { combineLatest, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, pluck } from 'rxjs/operators';\nimport { RouterState, RouterStore } from './router.store';\n\nfunction slice(section: string) {\n  return (source: Observable<RouterState>) => {\n    return source.pipe(map((data) => data.state)).pipe(\n      filterNilValue(),\n      map((state) => state[section])\n    );\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouterQuery extends Query<RouterState> {\n  __navigationCancel = new Subject();\n  __navigationError = new Subject();\n\n  constructor(protected store: RouterStore) {\n    super(store);\n  }\n\n  selectParams<T = any>(names: string[]): Observable<T[]>;\n  selectParams<T = any>(names?: string): Observable<T>;\n  selectParams<T = any>(names?: string | string[]): Observable<T | T[]> {\n    if (names === undefined) {\n      return this.select().pipe(slice('params'), distinctUntilChanged());\n    }\n\n    const select = (p: string) => this.select().pipe(slice('params'), pluck(p), distinctUntilChanged());\n\n    if (Array.isArray(names)) {\n      const sources = names.map(select);\n      return combineLatest(sources);\n    }\n\n    return select(names).pipe(distinctUntilChanged());\n  }\n\n  getParams<T = any>(name?: string): T | null {\n    if (this.getValue().state) {\n      const params = this.getValue().state.params;\n      if (name === undefined) {\n        return params as T;\n      }\n\n      return params[name];\n    }\n\n    return null;\n  }\n\n  selectQueryParams<T = any>(names: string[]): Observable<T[]>;\n  selectQueryParams<T = any>(names?: string): Observable<T>;\n  selectQueryParams<T = any>(names?: string | string[]): Observable<T | T[]> {\n    if (names === undefined) {\n      return this.select().pipe(slice('queryParams'), distinctUntilChanged());\n    }\n\n    const select = (p: string) => this.select().pipe(slice('queryParams'), pluck(p), distinctUntilChanged());\n\n    if (Array.isArray(names)) {\n      const sources = names.map(select);\n      return combineLatest(sources);\n    }\n\n    return select(names);\n  }\n\n  getQueryParams<T = any>(name?: string): T | null {\n    if (this.getValue().state) {\n      const params = this.getValue().state.queryParams;\n      if (name === undefined) {\n        return params as T;\n      }\n\n      return params[name];\n    }\n\n    return null;\n  }\n\n  selectFragment(): Observable<string> {\n    return this.select().pipe(slice('fragment'), distinctUntilChanged());\n  }\n\n  getFragment(): string | null {\n    if (this.getValue().state) {\n      return this.getValue().state.fragment;\n    }\n\n    return null;\n  }\n\n  selectData<T = any>(name?: string): Observable<T> {\n    if (name === undefined) {\n      return this.select().pipe(slice('data'), distinctUntilChanged());\n    }\n\n    return this.select().pipe(slice('data'), pluck(name), distinctUntilChanged());\n  }\n\n  getData<T = any>(name?: string): T | null {\n    if (this.getValue().state) {\n      const data = this.getValue().state.data;\n      if (name === undefined) {\n        return data as T;\n      }\n\n      return data[name];\n    }\n\n    return null;\n  }\n\n  selectNavigationExtras<T = any>(name?: string): Observable<T> {\n    if (name === undefined) {\n      return this.select().pipe(slice('navigationExtras'), distinctUntilChanged());\n    }\n\n    return this.select().pipe(slice('data'), pluck(name), distinctUntilChanged());\n  }\n\n  getNavigationExtras<T = any>(name?: string): T | null {\n    if (this.getValue().state) {\n      const data = this.getValue().state.navigationExtras;\n      if (name === undefined) {\n        return data as T;\n      }\n\n      return data[name];\n    }\n\n    return null;\n  }\n\n  selectNavigationCancel() {\n    return this.__navigationCancel.asObservable();\n  }\n\n  selectNavigationError() {\n    return this.__navigationError.asObservable();\n  }\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function coerceArray<T>(value: T | T[]): T[] {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n","export * from './lib/router.module';\nexport * from './lib/router.query';\nexport * from './lib/router.service';\nexport * from './lib/router.store';\n","// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n","import { Injector, ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { _FEATURE_EFFECTS, _ROOT_EFFECTS, FEATURE_EFFECT_INSTANCES, ROOT_EFFECT_INSTANCES } from './tokens';\nimport { EffectsRootModule } from './effect-root.module';\nimport { Actions } from './actions';\nimport { EffectsFeatureModule } from './effect-feature.module';\nimport { ModuleManager } from './module-manager.service';\n\n@NgModule({})\nexport class AkitaNgEffectsModule {\n  static forRoot(rootEffects: Type<any>[] = []): ModuleWithProviders<EffectsRootModule> {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        ModuleManager,\n        Actions,\n        rootEffects,\n        {\n          provide: _ROOT_EFFECTS,\n          useValue: [rootEffects],\n        },\n        {\n          provide: ROOT_EFFECT_INSTANCES,\n          useFactory: createEffectInstances,\n          deps: [Injector, _ROOT_EFFECTS, ModuleManager],\n        },\n      ],\n    };\n  }\n\n  static forFeature(featureEffects: Type<any>[] = []): ModuleWithProviders<EffectsFeatureModule> {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: _FEATURE_EFFECTS,\n          useValue: featureEffects,\n          multi: true,\n        },\n        {\n          provide: FEATURE_EFFECT_INSTANCES,\n          multi: true,\n          useFactory: createEffectInstances,\n          deps: [Injector, _FEATURE_EFFECTS, ModuleManager],\n        },\n      ],\n    };\n  }\n}\n\nexport function createEffectInstances(injector: Injector, effectGroups: Type<any>[][], moduleManager: ModuleManager): any[] {\n  const mergedEffects: Type<any>[] = [];\n\n  for (const effectGroup of effectGroups) {\n    mergedEffects.push(...effectGroup);\n  }\n  // todo we shouldn't use a map to avoid registering the effects twice;\n  // fix the underlying issue for feature is called twice\n  const effectInstances = mergedEffects.reduce((acc, effect) => {\n    if (!moduleManager.has(effect)) {\n      moduleManager.add(effect);\n      acc.push(injector.get(effect));\n    }\n    return acc;\n  }, []);\n\n  return effectInstances;\n}\n","import { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isArray } from './isArray';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\nimport { ID, IDS, ItemPredicate } from './types';\n\n// @internal\nexport function find<T>(collection: T[], idsOrPredicate: IDS | ItemPredicate, idKey: string) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n\n  return result;\n}\n\n// @internal\nexport function distinctUntilArrayItemChanged<T>(): MonoTypeOperatorFunction<T[]> {\n  return distinctUntilChanged((prevCollection: T[], currentCollection: T[]) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n\n    if (!isArray(prevCollection) || !isArray(currentCollection)) {\n      return false;\n    }\n\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n\n    if (prevCollection.length !== currentCollection.length) {\n      return false;\n    }\n\n    const isOneOfItemReferenceChanged = currentCollection.some((item, i) => {\n      return prevCollection[i] !== item;\n    });\n\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\n\n/**\n * Find items in a collection\n *\n * @example\n *\n *  selectEntity(1, 'comments').pipe(\n *   arrayFind(comment => comment.text = 'text')\n * )\n */\nexport function arrayFind<T>(ids: ItemPredicate<T>, idKey?: never): (source: Observable<T[]>) => Observable<T[]>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind(3)\n * )\n */\nexport function arrayFind<T>(ids: ID, idKey?: string): (source: Observable<T[]>) => Observable<T>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind([1, 2, 3])\n * )\n */\nexport function arrayFind<T>(ids: ID[], idKey?: string): (source: Observable<T[]>) => Observable<T[]>;\nexport function arrayFind<T>(idsOrPredicate: ID[] | ID | ItemPredicate<T>, idKey?: string): (source: Observable<T[]>) => Observable<T[] | T> {\n  return function (source: Observable<T[]>) {\n    return source.pipe(\n      map((collection: T[] | undefined | null) => {\n        // which means the user deleted the root entity or set the collection to nil\n        if (isArray(collection) === false) {\n          return collection;\n        }\n        return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n      }),\n      distinctUntilArrayItemChanged(),\n      map((value) => {\n        if (isArray(value) === false) {\n          return value;\n        }\n\n        if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n          return value;\n        }\n\n        return value[0];\n      })\n    );\n  };\n}\n","// @internal\nexport function isUndefined(value: any): value is undefined {\n  return value === undefined;\n}\n","import { defer, MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Store } from './store';\n\nexport function setLoadingAndError<T>(store: Store): MonoTypeOperatorFunction<T> {\n  return function <T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      store.setError(null);\n\n      return source.pipe(\n        tap({\n          error(err) {\n            store.setLoading(false);\n            store.setError(err);\n          },\n          complete() {\n            store.setLoading(false);\n          },\n        })\n      );\n    });\n  };\n}\n","import { Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport { startWith, switchMap } from 'rxjs/operators';\nimport { Product } from './state/products.model';\nimport { ProductsService } from './state/products.service';\nimport { ProductsQuery } from './state/products.query';\nimport { CartService } from '../cart/state/cart.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: `./products.component.html`\n})\nexport class ProductsComponent implements OnInit {\n  products$: Observable<Product[]>;\n  loading$: Observable<boolean>;\n  search = new FormControl();\n  sortControl = new FormControl('title');\n\n  constructor(private productsService: ProductsService, private cartService: CartService, private productsQuery: ProductsQuery) {}\n\n  ngOnInit() {\n    this.productsService.get().subscribe();\n    this.loading$ = this.productsQuery.selectLoading();\n    this.products$ = combineLatest([this.search.valueChanges.pipe(startWith('')), this.sortControl.valueChanges.pipe(startWith('title'))]).pipe(\n      switchMap(([term, sortBy]) => this.productsQuery.getProducts(term, sortBy as keyof Product))\n    );\n  }\n\n  addProductToCart({ id }: Product) {\n    this.cartService.addProductToCart(id);\n  }\n\n  subtract({ id }: Product) {\n    this.cartService.subtract(id);\n  }\n}\n","<section class=\"padding\">\n\n  <h1 class=\"grey-text flex align-center\">\n    <i class=\"large material-icons\">view_list</i>\n    Products\n  </h1>\n\n  <ng-container *ngIf=\"!(loading$ | async); else loadingTpl\">\n\n    <!--Sorting-->\n    <div class=\"col s12\">\n      <label>Sort by</label>\n      <select class=\"browser-default\" [formControl]=\"sortControl\">\n        <option value=\"title\">Name</option>\n        <option value=\"price\">Price</option>\n      </select>\n    </div>\n\n    <!--Search Input-->\n    <div class=\"input-field\">\n      <i class=\"material-icons prefix\">search</i>\n      <input placeholder=\"Search Product..\" [formControl]=\"search\">\n    </div>\n\n\n    <!--Products List-->\n\n    <div class=\"mt flex\">\n\n      <app-product *ngFor=\"let product of (products$ | async)\"\n                   (add)=\"addProductToCart($event)\"\n                   (subtract)=\"subtract($event)\"\n                   [product]=\"product\">\n      </app-product>\n\n    </div>\n\n  </ng-container>\n\n  <!--Spinner-->\n  <ng-template #loadingTpl>\n    <div class=\"progress\">\n      <div class=\"indeterminate\"></div>\n    </div>\n  </ng-template>\n\n</section>\n","import { Product } from '../../products/state/products.model';\n\nexport type CartItem = {\n  productId: Product['id'];\n  quantity: number;\n  total: number;\n};\n\nexport function createCartItem(params: Partial<CartItem>) {\n  return {\n    total: 0,\n    quantity: 1,\n    ...params\n  } as CartItem;\n}\n","import { Observable } from 'rxjs';\nimport { setMetadata } from './effect.utils';\nimport { EffectOptions } from './types';\n\nexport function createEffect<T>(actions$: () => Observable<T>, options?: EffectOptions): Observable<T> {\n  const effect = actions$();\n  options = {\n    dispatch: false,\n    ...options,\n  };\n  setMetadata(effect, null, options);\n\n  return effect;\n}\n","// @internal\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n// @internal\nexport function assertStoreHasName(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }): Observable<T | undefined | never> {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, Effect, ofType } from '@datorama/akita-ng-effects';\nimport { CartActions } from './cart.actions';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { CartStore } from './cart.store';\nimport { timer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEffects {\n  constructor(private actions$: Actions, private cartStore: CartStore) {}\n\n  removeItem$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(CartActions.removeItem),\n        tap(({ productId }) => this.cartStore.remove(productId)),\n        map((_) => {\n          return CartActions.removeItemSuccess();\n        })\n      ),\n    { dispatch: true }\n  );\n\n  @Effect()\n  removeItemSuccess = this.actions$.pipe(\n    ofType(CartActions.removeItemSuccess),\n    tap((_) => this.cartStore.notify(true)),\n    switchMap((state) => timer(3000).pipe(tap((_) => this.cartStore.notify(false))))\n  );\n}\n","import { EntityState } from './index';\n\n// @internal\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n","import { __stores__ } from './stores';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\nimport { $$addStore } from './dispatchers';\nimport { filter, take } from 'rxjs/operators';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things such as saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      if (storeName !== 'router') {\n        acc[storeName] = __stores__[storeName]._value();\n      }\n    }\n\n    return acc;\n  }\n\n  setStoresSnapshot(stores: { [storeName: string]: any } | string, options?: { skipStorageUpdate?: boolean; lazy?: boolean }) {\n    const mergedOptions = { ...{ skipStorageUpdate: false, lazy: false }, ...options };\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);\n\n    let normalizedStores = stores;\n\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    const size = Object.keys(normalizedStores).length;\n\n    if (mergedOptions.lazy) {\n      $$addStore\n        .pipe(\n          filter(name => normalizedStores.hasOwnProperty(name)),\n          take(size)\n        )\n        .subscribe(name => __stores__[name]._setState(() => normalizedStores[name]));\n    } else {\n      for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n        const storeName = keys[i];\n        if (__stores__[storeName]) {\n          __stores__[storeName]._setState(() => normalizedStores[storeName]);\n        }\n      }\n    }\n\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const _ROOT_EFFECTS = new InjectionToken<Type<any>[]>('@datorama/akita Internal Root Effects');\n\nexport const ROOT_EFFECT_INSTANCES = new InjectionToken<Type<any>[]>('@datorama/akita Root Effects');\n\nexport const _FEATURE_EFFECTS = new InjectionToken<Type<any>[]>('@datorama/akita Internal Feature Effects');\n\nexport const FEATURE_EFFECT_INSTANCES = new InjectionToken<Type<any>[]>('@datorama/akita Feature Effects');\n","import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { map, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AuthQuery } from './state/auth.query';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard {\n  constructor(private router: Router, private authQuery: AuthQuery) {}\n\n  canActivate(): Observable<boolean> {\n    // For sync storage\n    return this.authQuery.isLoggedIn$.pipe(\n      map(isAuth => {\n        if (isAuth) {\n          return true;\n        }\n        this.router.navigateByUrl('login');\n        return false;\n      }),\n      take(1)\n    );\n\n    // For async storage\n    // return combineLatest([\n    //   this.authQuery.isLoggedIn$,\n    //   selectPersistStateInit(),\n    // ]).pipe(\n    //   map(([isAuth]) => {\n    //     if(isAuth) {\n    //       return true;\n    //     }\n    //     this.router.navigateByUrl('login');\n    //     return false;\n    //   }),\n    //   take(1)\n    // );\n  }\n}\n","// @internal\nexport function mapSkipUndefined<T, V>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => V) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n","import { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { coerceArray } from './coerceArray';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { EntityStore } from './entityStore';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { QueryConfigOptions } from './queryConfig';\nimport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\nimport { EntityState, getEntityType, getIDType, HashMap, ItemPredicate, OrArray, SelectOptions } from './types';\n\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity<S extends EntityState, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Query<S> {\n  ui: EntityUIQuery<any, EntityType>;\n  protected store: EntityStore<S>;\n\n  // @internal\n  __store__;\n\n  constructor(store: EntityStore<S>, private options: QueryConfigOptions = {}) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.selectAll()\n   *\n   * this.query.selectAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.selectAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.selectAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   *\n   */\n  selectAll(options: SelectAllOptionsA<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsB<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsC<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsD<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsE<EntityType>): Observable<EntityType[]>;\n  selectAll(): Observable<EntityType[]>;\n  selectAll(\n    options: SelectOptions<EntityType> = {\n      asObject: false,\n    }\n  ): Observable<EntityType[] | HashMap<EntityType>> {\n    return this.select((state) => state.entities).pipe(map(() => this.getAll(options)));\n  }\n\n  /**\n   * Get the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.getAll()\n   *\n   * this.query.getAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.getAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.getAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   */\n  getAll(options: SelectAllOptionsA<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsB<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsC<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsD<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsE<EntityType>): EntityType[];\n  getAll(): EntityType[];\n  getAll(options: SelectOptions<EntityType> = { asObject: false, filterBy: undefined, limitTo: undefined }): EntityType[] | HashMap<EntityType> {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n\n    return entitiesToArray(this.getValue(), options);\n  }\n\n  /**\n   * Select multiple entities from the store\n   *\n   * @example\n   *\n   * this.query.selectMany([1,2,3])\n   * this.query.selectMany([1,2], entity => entity.title)\n   */\n  selectMany<R>(ids: IDType[]): Observable<EntityType[]>;\n  selectMany<R>(ids: IDType[], project: (entity: EntityType) => R): Observable<R[]>;\n  selectMany<R>(ids: IDType[], project?: (entity: EntityType) => R): Observable<EntityType[] | R[]> {\n    if (!ids || !ids.length) return of([]);\n\n    return this.select((state) => state.entities).pipe(\n      map((entities) => mapSkipUndefined(ids, (id) => getEntity(id, project)(entities))),\n      distinctUntilArrayItemChanged()\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity\n   *\n   * @example\n   *\n   * this.query.selectEntity(1)\n   * this.query.selectEntity(1, entity => entity.config.date)\n   * this.query.selectEntity(1, 'comments')\n   * this.query.selectEntity(e => e.title === 'title')\n   *\n   */\n  selectEntity<R>(id: IDType): Observable<EntityType | undefined>;\n  selectEntity<K extends keyof EntityType>(id: IDType, project?: K): Observable<EntityType[K] | undefined>;\n  selectEntity<R>(id: IDType, project: (entity?: EntityType) => R): Observable<R>;\n  selectEntity<R>(predicate: ItemPredicate<EntityType>): Observable<EntityType | undefined>;\n  selectEntity<R>(idOrPredicate: IDType | ItemPredicate<EntityType>, project?: ((entity: EntityType) => R) | keyof EntityType): Observable<R | EntityType | undefined> {\n    let id = idOrPredicate;\n\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      (id as any) = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n\n    return this.select((state) => state.entities).pipe(map(getEntity(id, project)), distinctUntilChanged());\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id: IDType): EntityType | undefined {\n    return this.getValue().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId(): Observable<S['active'] | undefined> {\n    return this.select((state) => (state as S & { active: S['active'] }).active);\n  }\n\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId(): S['active'] | undefined {\n    return this.getValue().active;\n  }\n\n  /**\n   * Select the active entity\n   *\n   * @example\n   *\n   * this.query.selectActive()\n   * this.query.selectActive(entity => entity.title)\n   */\n  selectActive<R>(): S['active'] extends any[] ? Observable<EntityType[]> : Observable<EntityType | undefined>;\n  selectActive<R>(project?: (entity: EntityType) => R): S['active'] extends any[] ? Observable<R[]> : Observable<R | undefined>;\n  selectActive<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> | Observable<EntityType[] | R[] | undefined> {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap((ids) => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap((ids) => this.selectEntity(ids, project)));\n  }\n\n  /**\n   * Get the active entity\n   *\n   * @example\n   *\n   * this.query.getActive()\n   */\n  getActive(): S['active'] extends any[] ? EntityType[] : EntityType | undefined;\n  getActive(): OrArray<EntityType> | undefined {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map((id) => this.getValue().entities[id as any]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate?: (entity: EntityType, index: number) => boolean): Observable<number> {\n    return this.select((state) => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate?: (entity: EntityType, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n\n  /**\n   *\n   * Select the last entity from the store\n   *\n   * @example\n   *\n   * this.query.selectLast()\n   * this.query.selectLast(todo => todo.title)\n   */\n  selectLast<R>(): Observable<EntityType | undefined>;\n  selectLast<R>(project: (entity?: EntityType) => R): Observable<R>;\n  selectLast<R>(project?: (entity?: EntityType) => R): Observable<R | EntityType | undefined> {\n    return this.selectAt((ids) => ids[ids.length - 1], project);\n  }\n\n  /**\n   *\n   * Select the first entity from the store\n   *\n   * @example\n   *\n   * this.query.selectFirst()\n   * this.query.selectFirst(todo => todo.title)\n   */\n  selectFirst<R>(): Observable<EntityType | undefined>;\n  selectFirst<R>(project: (entity?: EntityType) => R): Observable<R>;\n  selectFirst<R>(project?: (entity?: EntityType) => R): Observable<R | EntityType | undefined> {\n    return this.selectAt((ids) => ids[0], project);\n  }\n\n  /**\n   *\n   * Listen for entity actions\n   *\n   *  @example\n   *  this.query.selectEntityAction(EntityActions.Add);\n   *  this.query.selectEntityAction(EntityActions.Update);\n   *  this.query.selectEntityAction(EntityActions.Remove);\n   *\n   *  this.query.selectEntityAction([EntityActions.Add, EntityActions.Update, EntityActions.Remove])\n   *\n   *  this.query.selectEntityAction();\n   */\n  selectEntityAction(action: EntityActions): Observable<IDType[]>;\n  selectEntityAction(actions: EntityActions[]): Observable<EntityAction<IDType>>;\n  selectEntityAction(): Observable<EntityAction<IDType>>;\n  selectEntityAction(actionOrActions?: EntityActions | EntityActions[]): Observable<IDType[] | EntityAction<IDType>> {\n    if (isNil(actionOrActions)) {\n      return this.store.selectEntityAction$;\n    }\n\n    const project = isArray(actionOrActions) ? (action: EntityAction<IDType>) => action : ({ ids }: EntityAction<IDType>) => ids;\n    const actions = coerceArray(actionOrActions);\n\n    return this.store.selectEntityAction$.pipe(\n      filter(({ type }: EntityAction<IDType>) => actions.includes(type)),\n      map((action) => project(action))\n    );\n  }\n\n  /**\n   * Returns whether entity exists\n   *\n   * @example\n   *\n   * this.query.hasEntity(2)\n   * this.query.hasEntity(entity => entity.completed)\n   * this.query.hasEntity([1, 2, 33])\n   *\n   */\n  hasEntity(id: IDType): boolean;\n  hasEntity(id: IDType[]): boolean;\n  hasEntity(project: (entity: EntityType) => boolean): boolean;\n  hasEntity(): boolean;\n  hasEntity(projectOrIds?: IDType | IDType[] | ((entity: EntityType) => boolean)): boolean {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every((id) => (id as any) in this.getValue().entities);\n    }\n\n    return (projectOrIds as any) in this.getValue().entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id?: IDType): boolean {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n\n  private selectAt<R>(mapFn: (ids: IDType[]) => IDType, project?: (entity?: EntityType) => R) {\n    return this.select((state) => state.ids as any[]).pipe(\n      map(mapFn),\n      distinctUntilChanged(),\n      switchMap((id: IDType) => this.selectEntity(id, project))\n    );\n  }\n}\n\n// @internal\nexport class EntityUIQuery<UIState, DEPRECATED = any> extends QueryEntity<UIState> {\n  constructor(store) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductsStore } from './products.store';\nimport { map, mapTo } from 'rxjs/operators';\nimport { Observable, timer } from 'rxjs';\nimport { ID, cacheable } from '@datorama/akita';\nimport { products } from '../products.mocks';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  constructor(private productsStore: ProductsStore) {}\n\n  get(): Observable<void> {\n    const request = timer(500).pipe(\n      mapTo(products),\n      map(response => this.productsStore.set(response))\n    );\n\n    return cacheable(this.productsStore, request);\n  }\n\n  getProduct(id: ID) {\n    const product = products.find(current => current.id === +id);\n\n    return timer(500).pipe(\n      mapTo(product),\n      map(() => this.productsStore.add(product))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterService } from './router.service';\n\n@NgModule()\nexport class AkitaNgRouterStoreModule {\n  constructor(private routerService: RouterService) {\n    this.routerService.init();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth/auth.guard';\nimport { LoginComponent } from './auth/login/login.component';\nimport { CartComponent } from './cart/cart.component';\nimport { ProductPageComponent } from './product-page/product-page.component';\nimport { ProductsComponent } from './products/products.component';\n\nconst routes: Routes = [\n  {\n    component: ProductsComponent,\n    path: '',\n    pathMatch: 'full',\n    canActivate: [AuthGuard],\n  },\n  {\n    component: ProductPageComponent,\n    path: 'product/:id',\n    canActivate: [AuthGuard],\n  },\n  {\n    component: CartComponent,\n    path: 'cart',\n    canActivate: [AuthGuard],\n  },\n  {\n    component: LoginComponent,\n    path: 'login',\n  },\n  {\n    path: 'todos',\n    canActivate: [AuthGuard],\n    loadChildren: () => import('./todos-app/todos.module').then((m) => m.TodosModule),\n  },\n  {\n    path: 'contacts',\n    loadChildren: () => import('./contacts/contacts.module').then((m) => m.ContactsModule),\n  },\n  {\n    path: 'stories',\n    loadChildren: () => import('./stories/stories.module').then((m) => m.StoriesModule),\n  },\n  {\n    path: 'movies',\n    loadChildren: () => import('./movies/movies.module').then((m) => m.MoviesModule),\n  },\n  {\n    path: 'widgets',\n    loadChildren: () => import('./widgets/widgets.module').then((m) => m.WidgetsModule),\n  },\n  {\n    path: 'posts',\n    loadChildren: () => import('./posts/posts.module').then((m) => m.PostsModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { History, StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe((ids) => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, (e) => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, (e) => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, (e) => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, (e) => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>, customUpdateFn?: (history: History<State>) => History<State>) {\n    this.forEachId(ids, (e) => e.clear(customUpdateFn));\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, (e) => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, (e) => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LoginModule } from './login/login.module';\nimport { AuthEffects } from './state/auth.effects';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\n\n@NgModule({\n  imports: [LoginModule, AkitaNgEffectsModule.forFeature([AuthEffects])],\n})\nexport class AuthModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { EntityStore } from '../entityStore';\nimport { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNilValue } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNilValue());\n    }\n\n    if (property) {\n      return this.getQuery().select((state) => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string, replace = false) {\n    if (this.isEntityBased(entityId)) {\n      const store = this.getStore() as EntityStore;\n\n      replace ? store.replace(entityId, newState) : store.update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState((state) => {\n          return setValue(state, this.withStoreName(property), newState, true);\n        });\n\n        return;\n      }\n\n      const nextState = replace ? newState : (state) => ({ ...state, ...newState });\n\n      this.getStore()._setState(nextState);\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { createAction, props } from '@datorama/akita-ng-effects';\nimport { ID } from '@datorama/akita';\n\nexport namespace CartActions {\n  export const removeItem = createAction('Remove Item', props<{ productId: ID }>());\n  export const removeItemSuccess = createAction('Remove Item Success');\n\n  export const test = createAction('Testing Action');\n}\n// alternatively\n// export const removeItem = createAction(\"[Cart] Remove Item\", payload<{productId: ID}>())\n","import { EntityState, SelectOptions } from './types';\nimport { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@datorama/akita-ng-effects';\nimport { ProductsStore } from './products.store';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsEffects {\n  constructor(private actions$: Actions, private productsStore: ProductsStore) {}\n\n  @Effect()\n  allActionsProducts = this.actions$.pipe(tap((action) => console.log('product effect', action)));\n}\n","// @internal\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import { Injectable, OnDestroy, Type } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Actions } from './actions';\nimport { Action, Effect } from './types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModuleManager implements OnDestroy {\n  effectInstanceSources = new WeakSet();\n  destroyEffects$ = new Subject();\n\n  constructor(private actions$: Actions) {}\n\n  subscribeToEffects(effectInstance: Type<any>): void {\n    for (let key in effectInstance) {\n      const property: Effect = effectInstance[key];\n      if (property.isEffect === true) {\n        property.pipe(takeUntil(this.destroyEffects$)).subscribe((actionOrSkip) => {\n          this.dispatchAction(property, actionOrSkip);\n        });\n      }\n    }\n  }\n\n  has(effect: Type<any>): boolean {\n    return this.effectInstanceSources.has(effect);\n  }\n\n  add(effect: Type<any>): void {\n    this.effectInstanceSources.add(effect);\n  }\n\n  private dispatchAction(property: Effect, actionOrSkip: Action | Record<any, any>) {\n    if (property.dispatchAction && this.checkAction(actionOrSkip)) {\n      this.actions$.dispatch(actionOrSkip);\n    }\n  }\n\n  private checkAction(action: Action | any): action is Action & Record<'type', any> {\n    if (action.type) {\n      return true;\n    }\n    throw new TypeError('Make sure to provide a valid action type or set the option {dispatch: false}');\n  }\n\n  ngOnDestroy(): void {\n    // modules aren't supposed to be destroyed; might not be needed\n    this.destroyEffects$.next();\n    this.effectInstanceSources = new WeakSet();\n  }\n}\n","/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n * @remarks this isn't a GUID, but a 10 char random alpha-num\n */\nexport function guid() {\n  return Math.random()\n    .toString(36)\n    .slice(2);\n}\n","// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n  ttl?: number;\n  producerFn?: (state: any, fn: any) => any;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false,\n  ttl: null,\n  producerFn: undefined\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n\nexport function getGlobalProducerFn() {\n  return CONFIG.producerFn;\n}\n","import { EntityState, ID, StateWithActive } from './types';\nimport { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n\nexport type RemoveEntitiesParams<State, Entity> = {\n  state: StateWithActive<State>;\n  ids: any[];\n};\n\n// @internal\nexport function removeEntities<S extends EntityState<E>, E>({ state, ids }: RemoveEntitiesParams<S, E>): S {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n}\n\n// @internal\nexport function removeAllEntities<S>(state: StateWithActive<S>): S {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n","import { Subject } from 'rxjs';\nimport { EntityState, ID, PreUpdateEntity, UpdateStateCallback } from './types';\nimport { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n\nexport type UpdateEntitiesParams<State, Entity> = {\n  state: State;\n  ids: any[];\n  idKey: string;\n  newStateOrFn: UpdateStateCallback<Entity> | Partial<Entity> | Partial<State>;\n  preUpdateEntity: PreUpdateEntity<Entity>;\n  producerFn;\n  onEntityIdChanges: (oldId: any, newId: any) => void;\n};\n\n// @internal\nexport function updateEntities<S extends EntityState<E>, E>({ state, ids, idKey, newStateOrFn, preUpdateEntity, producerFn, onEntityIdChanges }: UpdateEntitiesParams<S, E>) {\n  const updatedEntities = {};\n\n  let isUpdatingIdKey = false;\n  let idToUpdate: ID;\n\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n\n    const oldEntity = state.entities[id];\n    let newState;\n    if (isFunction(newStateOrFn)) {\n      newState = isFunction(producerFn) ? producerFn(oldEntity, newStateOrFn) : newStateOrFn(oldEntity);\n    } else {\n      newState = newStateOrFn;\n    }\n\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity: E;\n    idToUpdate = id;\n\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n\n    const merged = {\n      ...oldEntity,\n      ...newState,\n    };\n\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new (oldEntity as any).constructor(merged);\n      } else {\n        newEntity = new (newState as any).constructor(merged);\n      }\n    }\n\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const { [id]: deletedEntity, ...rest } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map((current) => (current === id ? idToUpdate : current));\n    onEntityIdChanges(id, idToUpdate);\n  }\n\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities,\n    },\n    ids: updatedIds,\n  };\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableAkitaProdMode, persistState } from '@datorama/akita';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n  enableAkitaProdMode();\n}\n\nconst storage = persistState({\n  key: 'akitaPlayground',\n  include: ['auth.token', 'todos'],\n});\n\nplatformBrowserDynamic([{ provide: 'persistStorage', useValue: storage }])\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","import { Injectable } from '@angular/core';\nimport { AuthState, AuthStore } from './auth.store';\nimport { Query } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthQuery extends Query<AuthState> {\n  isLoggedIn$ = this.select(user => !!user.token);\n\n  constructor(protected store: AuthStore) {\n    super(store);\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Product } from '../state/products.model';\n\n@Component({\n  selector: 'app-product',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: `./product.component.html`\n})\nexport class ProductComponent {\n  @Input() product: Product;\n  @Output() add = new EventEmitter<Product>();\n  @Output() subtract = new EventEmitter<Product>();\n}\n","<div class=\"card p-width\">\n  <div class=\"card-image pointer\" [routerLink]=\"['/product', product.id]\">\n    <img src=\"http://via.placeholder.com/359x269?text={{product.title}}\">\n  </div>\n  <div class=\"card-content pointer\" [routerLink]=\"['/product', product.id]\">\n    <p class=\"mbb\">Price: <b>{{product.price}}$</b></p>\n    <p>{{product.description}}</p>\n  </div>\n  <div class=\"card-action flex flex-end\">\n    <button class=\"btn waves-effect waves-light cyan lighten-2 mr\" (click)=\"add.emit(product)\">\n      <i class=\"material-icons\">exposure_plus_1</i>\n    </button>\n    <button class=\"btn waves-effect waves-light blue-grey lighten-3\" (click)=\"subtract.emit(product)\">\n      <i class=\"material-icons\">exposure_neg_1</i>\n    </button>\n  </div>\n</div>","import { EffectOptions } from './types';\n\nexport function setMetadata(effect, propertyName, effectOptions: EffectOptions) {\n  Object.defineProperty(effect, 'isEffect', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: true,\n  });\n  Object.defineProperty(effect, 'name', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: propertyName,\n  });\n  Object.defineProperty(effect, 'dispatchAction', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: effectOptions.dispatch,\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { StoreConfig, Store, ID } from '@datorama/akita';\n\nexport interface AuthState {\n  id: ID;\n  firstName: string;\n  lastName: string;\n  token: string;\n}\n\nexport function createInitialState(): AuthState {\n  return {\n    id: null,\n    firstName: '',\n    lastName: '',\n    token: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({\n  name: 'auth',\n  resettable: true\n})\nexport class AuthStore extends Store<AuthState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [LoginComponent]\n})\nexport class LoginModule {}\n","export * from './lib/ng-entity.service';\nexport * from './lib/ng-entity-service.config';\nexport * from './lib/ng-entity-service-notifier';\nexport * from './lib/helpers';\nexport * from './lib/types';\nexport * from './lib/ng-entity-service.loader';\nexport * from './lib/action-factory';\n","import { combineLatest, Observable, ObservableInput, ObservedValueOf } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = { [P in keyof T]: T[P] extends Observable<infer R> ? R : never };\ntype Observables = [Observable<any>] | Observable<any>[];\n\nexport function combineQueries<R extends Observables>(observables: R): Observable<ReturnTypes<R>> {\n  return combineLatest(observables).pipe(auditTime(0)) as any;\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth/state/auth.service';\nimport { AuthQuery } from '../auth/state/auth.query';\nimport { CartQuery } from '../cart/state/cart.query';\n\n@Component({\n  selector: 'app-nav',\n  template: `\n    <nav>\n      <div class=\"nav-wrapper cyan lighten-2\">\n        <a class=\"brand-logo\" routerLink=\"/\">\n          <img src=\"/assets/akita.svg\" class=\"logo\" />\n        </a>\n        <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n          <li *ngIf=\"isLoggedIn$ | async\"><a (click)=\"logout()\">Logout</a></li>\n          <li *ngFor=\"let item of navItems\">\n            <a routerLinkActive=\"blue-text text-lighten-2\" [routerLink]=\"item.toLowerCase()\">{{ item }}</a>\n          </li>\n          <li>\n            <a routerLinkActive=\"blue-text text-lighten-2\" routerLink=\"cart\" [state]=\"{ hello: 'world' }\"\n              >Cart <span class=\"new badge\">{{ count$ | async }}</span></a\n            >\n          </li>\n        </ul>\n      </div>\n    </nav>\n  `\n})\nexport class NavComponent {\n  navItems = ['Todos', 'Contacts', 'Stories', 'Movies', 'Widgets', 'Posts', 'FormsManager'];\n  count$: Observable<number>;\n  isLoggedIn$: Observable<boolean>;\n\n  constructor(private cartQuery: CartQuery, private authService: AuthService, private authQuery: AuthQuery, private router: Router) {\n    this.count$ = this.cartQuery.selectCount();\n    this.isLoggedIn$ = this.authQuery.isLoggedIn$;\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigateByUrl('login');\n  }\n\n  resetStores() {\n    this.router.navigateByUrl('login');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartStore } from './cart.store';\nimport { CartQuery } from './cart.query';\nimport { createCartItem } from './cart.model';\nimport { ID } from '@datorama/akita';\nimport { Product } from '../../products/state/products.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  constructor(private cartStore: CartStore, private cartQuery: CartQuery) {}\n\n  addProductToCart(productId: Product['id']) {\n    const findItem = this.cartQuery.getEntity(productId);\n    if (!!findItem) {\n      return this.cartStore.updateQuantity(productId);\n    }\n\n    const item = createCartItem({\n      productId\n    });\n\n    return this.cartStore.add(item);\n  }\n\n  subtract(productId: Product['id']) {\n    const findItem = this.cartQuery.getEntity(productId);\n    if (!!findItem) {\n      if (findItem.quantity === 1) {\n        return this.cartStore.remove(productId);\n      }\n\n      return this.cartStore.updateQuantity(findItem.productId, -1);\n    }\n  }\n\n  remove(productId: ID) {\n    this.cartStore.remove(productId);\n  }\n}\n","import { setMetadata } from './effect.utils';\nimport { EffectOptions } from './types';\n\nexport function Effect(options?: EffectOptions) {\n  options = {\n    dispatch: false,\n    ...options,\n  };\n\n  return function (classProto: any, propKey: string): any {\n    let returnValue;\n\n    Object.defineProperty(classProto, propKey, {\n      get: function () {\n        return returnValue;\n      },\n      set: function (value) {\n        setMetadata(value, propKey, options);\n        returnValue = value;\n      },\n      enumerable: true,\n    });\n  };\n}\n","import { IDS } from './types';\n\nexport interface StoreSnapshotAction {\n  type: string | null;\n  entityIds: IDS[] | null;\n  skip: boolean;\n  payload: any\n}\n\nexport const currentAction: StoreSnapshotAction = {\n  type: null,\n  entityIds: null,\n  skip: false,\n  payload: null\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?, payload?: any) {\n  setAction(type, entityIds, payload);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?, payload?: any) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n    currentAction.payload = payload\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","import { EntityStore } from './entityStore';\nimport { AkitaError } from './errors';\nimport { isNil } from './isNil';\nimport { Store } from './store';\nimport { configKey } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { Constructor } from './types';\n\nexport enum StoreAction {\n  Update = 'UPDATE',\n}\n\nconst StoreActionMapping = {\n  [StoreAction.Update]: 'update',\n};\n\nexport enum EntityStoreAction {\n  Update = 'UPDATE',\n  AddEntities = 'ADD_ENTITIES',\n  SetEntities = 'SET_ENTITIES',\n  UpdateEntities = 'UPDATE_ENTITIES',\n  RemoveEntities = 'REMOVE_ENTITIES',\n  UpsertEntities = 'UPSERT_ENTITIES',\n  UpsertManyEntities = 'UPSERT_MANY_ENTITIES',\n}\n\nconst EntityStoreActionMapping = {\n  [EntityStoreAction.Update]: 'update',\n  [EntityStoreAction.AddEntities]: 'add',\n  [EntityStoreAction.SetEntities]: 'set',\n  [EntityStoreAction.UpdateEntities]: 'update',\n  [EntityStoreAction.RemoveEntities]: 'remove',\n  [EntityStoreAction.UpsertEntities]: 'upsert',\n  [EntityStoreAction.UpsertManyEntities]: 'upsertMany',\n};\n\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeClass The {@link Store} class of the instance to be returned.\n */\nexport function getStore<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : never>(storeClass: Constructor<TStore>): TStore {\n  return getStoreByName<TStore, S>(storeClass[configKey]['storeName']);\n}\n\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeName The {@link Store} name of the instance to be returned.\n */\nexport function getStoreByName<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : never>(storeName: string): TStore {\n  const store = __stores__[storeName] as TStore;\n\n  if (isNil(store)) {\n    throw new AkitaError(`${store.storeName} doesn't exist`);\n  }\n\n  return store;\n}\n\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeClass The {@link EntityStore} class of the instance to be returned.\n */\nexport function getEntityStore<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : never>(storeClass: Constructor<TEntityStore>): TEntityStore {\n  return getStore(storeClass as Constructor<Store<S>>) as TEntityStore;\n}\n\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeName The {@link EntityStore} name of the instance to be returned.\n */\nexport function getEntityStoreByName<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : never>(storeName: string): TEntityStore {\n  return getStoreByName<TEntityStore, S>(storeName) as TEntityStore;\n}\n\n/**\n * Run {@link StoreAction.Update} action.\n * @param storeClassOrName The {@link Store} class or name in which the action should be executed.\n * @param action The {@link StoreAction.Update} action, see {@link Store.update}.\n * @param operation The operation to execute the {@link StoreAction.Update} action.\n * @example\n *\n *  runStoreAction(BooksStore, StoreAction.Update, update => update({ filter: 'COMPLETE' }));\n *\n */\nexport function runStoreAction<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : any>(\n  storeClassOrName: Constructor<TStore> | string,\n  action: StoreAction.Update,\n  operation: (operator: TStore['update']) => void\n);\nexport function runStoreAction<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : any>(\n  storeClassOrName: Constructor<TStore> | string,\n  action: StoreAction,\n  operation: (operator: TStore[keyof TStore] & Function) => void\n) {\n  const store = typeof storeClassOrName === 'string' ? getStoreByName<TStore, S>(storeClassOrName) : getStore<TStore, S>(storeClassOrName);\n  operation(store[StoreActionMapping[action]].bind(store));\n}\n\n/**\n * Run {@link EntityStoreAction.SetEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.SetEntities} action, see {@link EntityStore.set}.\n * @param operation The operation to execute the {@link EntityStoreAction.SetEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.SetEntities, set => set([{ id: 1 }, { id: 2 }]));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.SetEntities,\n  operation: (operator: TEntityStore['set']) => void\n);\n/**\n * Run {@link EntityStoreAction.AddEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.AddEntities} action, see {@link EntityStore.add}.\n * @param operation The operation to execute the {@link EntityStoreAction.AddEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.AddEntities, add => add({ id: 1 }));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.AddEntities,\n  operation: (operator: TEntityStore['add']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpdateEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpdateEntities} action, see {@link EntityStore.update}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpdateEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpdateEntities, update => update(2, { title: 'New title' }));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpdateEntities,\n  operation: (operator: TEntityStore['update']) => void\n);\n/**\n * Run {@link EntityStoreAction.RemoveEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.RemoveEntities} action, see {@link EntityStore.remove}.\n * @param operation The operation to execute the {@link EntityStoreAction.RemoveEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.RemoveEntities, remove => remove(2));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.RemoveEntities,\n  operation: (operator: TEntityStore['remove']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpsertEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpsertEntities} action, see {@link EntityStore.upsert}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpsertEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpsertEntities, upsert => upsert([2, 3], { title: 'New Title' }, (id, newState) => ({ id, ...newState, price: 0 })));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpsertEntities,\n  operation: (operator: TEntityStore['upsert']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpsertManyEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpsertManyEntities} action, see {@link EntityStore.upsertMany}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpsertManyEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpsertManyEntities, upsertMany => upsertMany([\n *    { id: 2, title: 'New title', price: 0 },\n *    { id: 4, title: 'Another title', price: 0 },\n *  ));\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpsertManyEntities,\n  operation: (operator: TEntityStore['upsertMany']) => void\n);\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction,\n  operation: (operator: TEntityStore[keyof TEntityStore] & Function) => void\n) {\n  const store = typeof storeClassOrName === 'string' ? getEntityStoreByName<TEntityStore, S>(storeClassOrName) : getEntityStore<TEntityStore, S>(storeClassOrName);\n  operation(store[EntityStoreActionMapping[action]].bind(store));\n}\n","import { isObject } from './isObject';\n\n/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj: any, prop: string, val: any, replace = false) {\n  const split = prop.split('.');\n\n  if (split.length === 1) {\n    return { ...obj, ...val };\n  }\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index !== lastIndex) {\n      acc[part] = { ...acc[part] };\n      return acc && acc[part];\n    }\n\n    acc[part] = replace || Array.isArray(acc[part]) || !isObject(acc[part]) ? val : { ...acc[part], ...val };\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@datorama/akita-ng-effects';\nimport { AuthStore } from './auth.store';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthEffects {\n  constructor(private actions$: Actions, private authStore: AuthStore) {}\n\n  @Effect({ dispatch: false })\n  allActionsAuth = this.actions$.pipe(tap((action) => console.log('auth effect', action)));\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current),\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      const watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}): void {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead(): DirtyCheckPlugin<State> {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead(): boolean {\n    return !!this.getHead();\n  }\n\n  destroy(): void {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string): boolean {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  getHead(): Partial<State> | State | undefined | null {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const sources = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map((prop) =>\n          this.query\n            .select((state) => state[prop])\n            .pipe(\n              map((val) => ({\n                val,\n                __akitaKey: prop,\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(sources)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some((state) => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce((watched, prop) => {\n      watched[prop] = source[prop];\n      return watched;\n    }, {} as Partial<State>);\n  }\n}\n","export enum EntityActions {\n  Set = 'Set',\n  Add = 'Add',\n  Update = 'Update',\n  Remove = 'Remove',\n}\n\nexport interface EntityAction<IDType> {\n  type: EntityActions;\n  ids: IDType[];\n}\n","import { OrArray } from './types';\nimport { coerceArray } from './coerceArray';\nimport { AddEntitiesOptions } from './addEntities';\n\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\n\nexport function arrayAdd<T extends any[], Entity = any>(arr: T, newEntity: OrArray<Entity>, options: AddEntitiesOptions = {}): T {\n  const newEntities = coerceArray(newEntity);\n  const toArr = arr || [];\n\n  return options.prepend ? [...newEntities, ...toArr] : ([...toArr, ...newEntities] as any);\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { isNumber, isString } from '@datorama/akita';\n\nexport function isID(idOrConfig: any) {\n  return isNumber(idOrConfig) || isString(idOrConfig);\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, GuardsCheckEnd, NavigationCancel, NavigationEnd, NavigationError, ResolveEnd, Router, RoutesRecognized } from '@angular/router';\nimport { RouterState, RouterStore } from './router.store';\nimport { RouterQuery } from './router.query';\nimport { action, setSkipAction } from '@datorama/akita';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouterService {\n  private dispatchTriggeredByRouter = false;\n  private navigationTriggeredByDispatch = false;\n  private lastRouterState: RouterState;\n\n  constructor(private routerStore: RouterStore, private routerQuery: RouterQuery, private router: Router) {}\n\n  @action('Navigation Cancelled')\n  dispatchRouterCancel(event: NavigationCancel) {\n    this.update({ navigationId: event.id });\n    this.routerQuery.__navigationCancel.next(event);\n  }\n\n  @action('Navigation Error')\n  dispatchRouterError(event: NavigationError) {\n    this.update({ navigationId: event.id });\n    this.routerQuery.__navigationError.next(event);\n  }\n\n  @action('Navigation Succeeded')\n  dispatchRouterSuccess() {\n    this.update(this.lastRouterState);\n  }\n\n  init() {\n    this.setUpStoreListener();\n    this.setUpStateRollbackEvents();\n  }\n\n  private update(routerState: Partial<RouterState>) {\n    this.dispatchTriggeredByRouter = true;\n    this.routerStore.update((state) => {\n      return {\n        ...state,\n        ...routerState,\n      };\n    });\n    this.dispatchTriggeredByRouter = false;\n    this.navigationTriggeredByDispatch = false;\n  }\n\n  private setUpStoreListener(): void {\n    this.routerQuery\n      .select((state) => state)\n      .subscribe((s) => {\n        this.lastRouterState = s;\n        this.navigateIfNeeded();\n      });\n  }\n\n  private navigateIfNeeded(): void {\n    if (!this.lastRouterState || !this.lastRouterState.state || this.dispatchTriggeredByRouter) {\n      return;\n    }\n\n    if (this.router.url !== this.lastRouterState.state.url) {\n      this.navigationTriggeredByDispatch = true;\n      setSkipAction();\n      this.router.navigateByUrl(this.lastRouterState.state.url);\n    }\n  }\n\n  private setUpStateRollbackEvents(): void {\n    this.router.events.subscribe((e) => {\n      if (e instanceof RoutesRecognized || e instanceof GuardsCheckEnd || e instanceof ResolveEnd) {\n        this.lastRouterState = this.serializeRoute(e);\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      } else if (e instanceof NavigationEnd && !this.navigationTriggeredByDispatch) {\n        this.dispatchRouterSuccess();\n      }\n    });\n  }\n\n  private serializeRoute(navigationEvent: RoutesRecognized | GuardsCheckEnd | ResolveEnd): RouterState {\n    let state: ActivatedRouteSnapshot = navigationEvent.state.root;\n    while (state.firstChild) {\n      state = state.firstChild;\n    }\n    const { params, data, queryParams, fragment } = state;\n\n    return {\n      navigationId: navigationEvent.id,\n      state: {\n        url: navigationEvent.url,\n        urlAfterRedirects: navigationEvent.urlAfterRedirects,\n        params,\n        queryParams,\n        fragment,\n        data,\n        navigationExtras: this.router.getCurrentNavigation().extras ? this.router.getCurrentNavigation().extras.state : {},\n      },\n    };\n  }\n}\n","import { toBoolean } from './toBoolean';\n\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isNumber(value: any): value is number {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n","import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n","import { isBrowser } from './root';\n\nexport let __DEV__ = true;\n\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n  if (isBrowser) {\n    delete (window as any).$$stores;\n    delete (window as any).$$queries;\n  }\n}\n\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n","import { IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove<T extends any[], Entity = any>(arr: T, identifier: IDS | ItemPredicate<Entity>, idKey = DEFAULT_ID_KEY): T {\n  let identifiers;\n  let filterFn;\n\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier as IDS);\n    filterFn = (current) => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n\n  if (Array.isArray(arr)) {\n    return arr.filter(filterFn) as any;\n  }\n}\n","import { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\nimport { IDS, ItemPredicate } from './types';\n\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate<T extends any[], Entity = any>(arr: T, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey = DEFAULT_ID_KEY): T {\n  let condition: ItemPredicate<Entity>;\n\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = (item) => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n\n  const updateFn = (state) =>\n    state.map((entity, index) => {\n      if (condition(entity, index) === true) {\n        return isObject(entity)\n          ? {\n              ...entity,\n              ...obj,\n            }\n          : obj;\n      }\n\n      return entity;\n    });\n\n  return updateFn(arr);\n}\n","import { currentAction, setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './capitalize';\nimport { isNotBrowser } from './root';\n\nexport type DevtoolsOptions = {\n  /** instance name visible in devtools */\n  name: string;\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  storesWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n  shallow: boolean;\n  sortAlphabetically: boolean;\n};\nlet subs = [];\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (isNotBrowser) return;\n\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  subs.length &&\n    subs.forEach((s) => {\n      if (s.unsubscribe) {\n        s.unsubscribe();\n      } else {\n        s && s();\n      }\n    });\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = (cb) => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita', shallow: true, storesWhitelist: [] };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  const isAllowed = (storeName) => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n\n  subs.push(\n    $$addStore.subscribe((storeName) => {\n      if (isAllowed(storeName) === false) return;\n      appState = {\n        ...appState,\n        [storeName]: __stores__[storeName]._value(),\n      };\n      devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);\n    })\n  );\n\n  subs.push(\n    $$deleteStore.subscribe((storeName) => {\n      if (isAllowed(storeName) === false) return;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    })\n  );\n\n  subs.push(\n    $$updateStore.subscribe(({ storeName, action }) => {\n      if (isAllowed(storeName) === false) return;\n      const { type, entityIds, skip, ...rest } = action;\n\n      const payload = rest.payload;\n      if (skip) {\n        setSkipAction(false);\n        return;\n      }\n\n      const store = __stores__[storeName];\n      if (!store) {\n        return;\n      }\n\n      if (options.shallow === false && appState[storeName]) {\n        const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n        if (isEqual) return;\n      }\n\n      appState = {\n        ...appState,\n        [storeName]: store._value(),\n      };\n\n      const normalize = capitalize(storeName);\n      let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      if (options.sortAlphabetically) {\n        const sortedAppState = Object.keys(appState)\n          .sort()\n          .reduce((acc, storeName) => {\n            acc[storeName] = appState[storeName];\n            return acc;\n          }, {});\n\n        devTools.send({ type: msg, ...payload }, sortedAppState)\n        return;\n      }\n\n      devTools.send({ type: msg, ...payload }, appState)\n    })\n  );\n\n  subs.push(\n    devTools.subscribe((message) => {\n      if (message.type === 'DISPATCH') {\n        const payloadType = message.payload.type;\n\n        if (payloadType === 'COMMIT') {\n          devTools.init(appState);\n          return;\n        }\n\n        if (message.state) {\n          const rootState = JSON.parse(message.state);\n          for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n            const storeName = keys[i];\n            if (__stores__[storeName]) {\n              (ngZoneOrOptions as NgZoneLike).run(() => {\n                __stores__[storeName]._setState(() => rootState[storeName], false);\n              });\n            }\n          }\n        }\n      }\n    })\n  );\n}\n","export * from './lib/ng-devtools.module';\n","import { isNil } from './isNil';\n\n// @internal\nexport function isDefined(val: any) {\n  return isNil(val) === false;\n}\n","import { DEFAULT_ID_KEY } from './defaultIDKey';\n\n// @internal\nexport function toEntitiesIds<E>(entities: E[], idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n","import { Injectable } from '@angular/core';\nimport { isFunction } from '@datorama/akita';\nimport { ReplaySubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\nexport type Event = { method: HttpMethod; loading: boolean; storeName: string; entityId?: any };\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceLoader {\n  private dispatcher = new ReplaySubject<Event>(1);\n  loading$ = this.dispatcher.asObservable();\n\n  dispatch(event: Event) {\n    this.dispatcher.next(event);\n  }\n\n  loadersFor(name?: string) {\n    const filterStore = filter(({ storeName }: Event) => (name ? storeName === name : true));\n    const filterMethod = (mthd) =>\n      filter(({ method }: Event) => {\n        return isFunction(mthd) ? mthd(method) : method === mthd;\n      });\n\n    const actionBased = (current: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(current),\n        map((action) => action.loading)\n      );\n\n    const idBased = (id: any, mthd: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(mthd),\n        filter((action) => action.entityId === id),\n        map((action) => action.loading)\n      );\n\n    return {\n      get$: actionBased(HttpMethod.GET),\n      add$: actionBased(HttpMethod.POST),\n      update$: actionBased((method) => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      delete$: actionBased(HttpMethod.DELETE),\n      getEntity: (id: any) => idBased(id, HttpMethod.GET),\n      updateEntity: (id: any) => idBased(id, (method) => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      deleteEntity: (id: any) => idBased(id, HttpMethod.DELETE),\n    };\n  }\n}\n","// @internal\nexport function not(pred: Function): Function {\n  return function(...args) {\n    return !pred(...args);\n  };\n}\n","export const products = [\n  {\n    id: 3,\n    title: 'Rx',\n    description: 'Is a set of libraries to compose asynchronous and event-based programs using observable collections and Array style composition in JavaScript',\n    price: 30\n  },\n  {\n    id: 1,\n    title: 'JavaScript',\n    description: 'JavaScript, often abbreviated as JS, is a high-level, interpreted programming language.',\n    price: 10\n  },\n  {\n    id: 2,\n    title: 'Angular',\n    description: 'Learn one way to build applications with Angular and reuse your code and abilities to build apps for any deployment target.',\n    price: 20\n  }\n];\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n","// @internal\nexport function isArray<T>(value: any): value is T[] {\n  return Array.isArray(value);\n}\n","import { isFunction } from './isFunction';\n\nexport function compareKeys<T>(keysOrFuncs: any[]) {\n  return function <T>(prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if(isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n","export { Actions } from './lib/actions';\nexport { AkitaNgEffectsModule } from './lib/akita-ng-effects.module';\nexport { EffectsRootModule } from './lib/effect-root.module';\nexport { Effect } from './lib/effect.decorator';\nexport { createEffect } from './lib/create-effect.util';\nexport { action as createAction, props, payload } from 'ts-action';\nexport { ofType } from 'ts-action-operators';\n","import { ID } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert<Root extends any[]>(arr: Root, id: ID, obj: Partial<Root[0]>, idKey = DEFAULT_ID_KEY): Root[0][] {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => (entityIsObject ? entity[idKey] === id : entity === id));\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? { ...obj, [idKey]: id } : obj);\n  }\n}\n","import { merge, MonoTypeOperatorFunction, Observable, of, Operator, Subscriber, TeardownLogic } from 'rxjs';\nimport { filter, first, switchMap, tap } from 'rxjs/operators';\nimport { QueryEntity } from './queryEntity';\nimport { EntityState, getEntityType, getQueryEntityState } from './types';\n\n/**\n * Track id updates of an entity and re-evaluation the query with the changed entity id.\n * Hint: Don't place the operator after other operators in the same pipeline as those will be skipped on\n * re-evaluation. Also, it can't be used with the selection operator, e.g <code>selectEntity(1, e => e.title)</code>\n * @param query The query from which the entity is selected.\n * @example\n *\n *   query.selectEntity(1).pipe(trackIdChanges(query)).subscribe(entity => { ... })\n *\n */\nexport function trackIdChanges<K extends QueryEntity<S, T>, S extends EntityState<T> = getQueryEntityState<K>, T = getEntityType<S>>(query: K): MonoTypeOperatorFunction<T> {\n  return (source) => source.lift<T>(new TrackIdChanges(query));\n}\n\nclass TrackIdChanges<K extends QueryEntity<S, T>, S extends EntityState<T>, T = getEntityType<S>> implements Operator<T, T> {\n  constructor(readonly query: K) {}\n\n  call(subscriber: Subscriber<T>, source: Observable<T>): TeardownLogic {\n    return source\n      .pipe(\n        first(),\n        switchMap((entity) => {\n          let currId = entity[this.query.__store__.config.idKey];\n          let pending = false;\n\n          return merge(of({ newId: undefined, oldId: currId, pending: false }), this.query.__store__.selectEntityIdChanges$).pipe(\n            // the new id must differ form the old id\n            filter((change) => change.oldId === currId),\n            // extract the current pending state of the id update\n            tap((change) => (pending = change.pending)),\n            // only update the selection query if the id update is already applied to the store\n            filter((change) => change.newId !== currId && !pending),\n            // build a selection query for the new entity id\n            switchMap((change) =>\n              this.query\n                .selectEntity((currId = change.newId || currId))\n                // skip undefined value if pending.\n                .pipe(filter(() => !pending))\n            )\n          );\n        })\n      )\n      .subscribe(subscriber);\n  }\n}\n","export * from './lib/index';\n","import { EntityState, ID } from './index';\n\n// @internal\nexport function hasEntity<E>(entities: EntityState<E>, id: ID) {\n  return entities.hasOwnProperty(id);\n}\n","/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue( obj: any, prop: string ) {\n  /** return the whole state  */\n  if( prop.split('.').length === 1 ) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce(( acc: any, part: string ) => acc && acc[part], obj);\n}\n","import { Injectable } from '@angular/core';\nimport { AuthStore } from './auth.store';\nimport { mapTo, tap } from 'rxjs/operators';\nimport { timer } from 'rxjs';\n\nexport type Creds = {\n  email: string;\n  password: string;\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private authStore: AuthStore) {}\n\n  login(creds: Creds) {\n    return simulateRequest(creds).pipe(tap(user => this.authStore.update(user)));\n  }\n\n  logout() {\n    this.authStore.reset();\n  }\n}\n\nexport function simulateRequest(creds: Creds) {\n  return timer(400).pipe(\n    mapTo({\n      id: 1,\n      firstName: 'Netanel',\n      lastName: 'Basal',\n      token: 'token'\n    })\n  );\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"fLeU\";","import { EntityServiceAction, NgEntityServiceNotifier } from './ng-entity-service-notifier';\n\nexport function successAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, successMsg }) {\n    notifier.dispatch({\n      type: 'success',\n      storeName,\n      payload,\n      method,\n      successMsg\n    });\n  };\n}\n\nexport function errorAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, errorMsg }) {\n    notifier.dispatch({\n      type: 'error',\n      storeName,\n      payload,\n      method,\n      errorMsg\n    });\n  };\n}\n","import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CartComponent } from './cart.component';\n\nconst publicApi = [CartComponent];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [publicApi],\n  exports: [publicApi]\n})\nexport class CartModule {}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Action } from './types';\nimport { logAction } from '@datorama/akita';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Actions extends Subject<Action> {\n  dispatch(value: Action): void {\n    this.logAction(value);\n    this.next(value);\n  }\n\n  logAction(value: Action): void {\n    const { type, ...props } = value;\n    const hasPayload = Object.getOwnPropertyNames(props).length > 0;\n    logAction(type, null, hasPayload ? props : null);\n  }\n}\n","import { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { filter, map, skip } from 'rxjs/operators';\nimport { setAction } from './actions';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { getValue } from './getValueByString';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { hasLocalStorage, hasSessionStorage, isNotBrowser } from './root';\nimport { setValue } from './setValueByString';\nimport { __stores__ } from './stores';\nimport { HashMap, MaybeAsync } from './types';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport type PersistStateSelectFn<T = any> = ((store: T) => Partial<T>) & { storeName: string };\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /** By default the whole state is saved to storage, use this param to include only the stores you need. */\n  include: (string | ((storeName: string) => boolean))[];\n  /** By default the whole state is saved to storage, use this param to include only the data you need. */\n  select: PersistStateSelectFn[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any, initialState: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport interface PersistState {\n  destroy(): void;\n  /**\n   * @deprecated Use clearStore instead.\n   */\n  clear(): void;\n  clearStore(storeName?: string): void;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>): PersistState {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    select: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function (storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function (storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => (source) => source,\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, select, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if ((isNotBrowser && !enableInNonBrowser) || !storage) return;\n\n  const hasInclude = include.length > 0;\n  const hasSelect = select.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n  let selectStores: { [key: string]: PersistStateSelectFn };\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  if (hasSelect) {\n    selectStores = select.reduce((acc, selectFn) => {\n      acc[selectFn.storeName] = selectFn;\n\n      return acc;\n    }, {});\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select((state) => getValue(state, path))\n        .pipe(\n          skip(1),\n          map((store) => {\n            if (hasSelect && selectStores[storeName]) {\n              return selectStores[storeName](store);\n            }\n\n            return store;\n          }),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe((data) => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState((state) => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName], state));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe((storeName) => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe((storeName) => {\n        if (storeName === 'router') {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some((fn) => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach((s) => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe((v) => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    },\n  };\n}\n","import { Observable } from 'rxjs';\nimport { EntityState, OrArray, getIDType } from '../types';\nimport { QueryEntity } from '../queryEntity';\nimport { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n\nexport type RebaseAction<P = any> = (plugin: P) => any;\n\nexport type RebaseActions<P = any> = { beforeRemove?: RebaseAction; beforeAdd?: RebaseAction; afterAdd?: RebaseAction };\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport abstract class EntityCollectionPlugin<State extends EntityState, P> {\n  protected entities = new Map<getIDType<State>, P>();\n\n  protected constructor(protected query: QueryEntity<State>, private entityIds: OrArray<getIDType<State>>) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: getIDType<State>): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: getIDType<State>): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: getIDType<State>) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: getIDType<State>, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): any {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): getIDType<State>[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: getIDType<State>[], actions: RebaseActions<P> = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<any> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: any[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: getIDType<State>): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: getIDType<State>);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: OrArray<getIDType<State>>, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { pairwise, distinctUntilChanged } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n  watchProperty?: string;\n  comparator?: (prevState, currentState) => boolean;\n}\n\nexport type History<State> = {\n  past: State[];\n  present: State | null;\n  future: State[];\n};\n\nexport class StateHistoryPlugin<State = any> extends AkitaPlugin<State> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: [],\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  /* Subjects for supporting observable hasPast$ and hasFuture$ */\n  private hasPastSubject: BehaviorSubject<boolean>;\n  private _hasPast$: Observable<boolean>;\n  private hasFutureSubject: BehaviorSubject<boolean>;\n  private _hasFuture$: Observable<boolean>;\n\n  constructor(protected query: Queries<State>, private params: StateHistoryParams = {}, private _entityId?: any) {\n    super(query, {\n      resetFn: () => this.clear(),\n    });\n    params.maxAge = !!params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n\n    this.activate();\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$(): Observable<boolean> {\n    return this._hasPast$;\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$(): Observable<boolean> {\n    return this._hasFuture$;\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  private get property() {\n    return this.params.watchProperty;\n  }\n\n  /* Updates the hasPast$ hasFuture$ observables*/\n  private updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = (this as any)\n      .selectSource(this._entityId, this.property)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        /**\n         *  comparator: (prev, current) => isEqual(prev, current) === false\n         */\n        const shouldUpdate = this.params.comparator(past, present);\n\n        if (!this.skipUpdate && shouldUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n          this.updateHasHistory();\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9];\n     * const index = 2;\n     *\n     * newPast = past.slice(0, index) = [1, 2];\n     * newPresent = past[index] = 3;\n     * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), present, ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9, 10]\n     * const index = 1\n     *\n     * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];\n     * newPresent = future[index] = 8;\n     * newFuture = futrue.slice(index+1) = [9, 10];\n     *\n     */\n\n    const newPast = [...past, present, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n: number) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn?: (history: History<State>) => History<State>) {\n    this.history = isFunction(customUpdateFn)\n      ? customUpdateFn(this.history)\n      : {\n          past: [],\n          present: null,\n          future: [],\n        };\n    this.updateHasHistory();\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property, true);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartItem } from './cart.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\nimport { Product } from '../../products/state/products.model';\n\nexport interface CartState extends EntityState<CartItem> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({\n  name: 'cart',\n  idKey: 'productId'\n})\nexport class CartStore extends EntityStore<CartState> {\n  constructor() {\n    super();\n  }\n\n  updateQuantity(productId: Product['id'], operand = 1) {\n    this.update(productId, entity => {\n      const newQuantity = entity.quantity + operand;\n      return {\n        ...entity,\n        quantity: newQuantity\n      };\n    });\n  }\n\n  notify(notify: boolean) {\n    this.update(state => ({ ...state, notify }));\n  }\n}\n","import { AkitaConfig } from './config';\n\nexport type StoreConfigOptions = {\n  name: string;\n  resettable?: AkitaConfig['resettable'];\n  cache?: { ttl: number };\n  deepFreezeFn?: (o: any) => any;\n  idKey?: string;\n  producerFn?: AkitaConfig['producerFn'];\n};\n\nexport type UpdatableStoreConfigOptions = {\n  cache?: { ttl: number };\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","// @internal\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n","import { EntityState, getEntityType, getIDType } from './types';\nimport { Observable } from 'rxjs';\n\nexport abstract class EntityService<S extends EntityState> {\n  abstract get<T>(id?: getIDType<S>, config?: any): Observable<T>;\n  abstract add<T>(entity: getEntityType<EntityState>, config?: any): Observable<T>;\n  abstract update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config: any): Observable<T>;\n  abstract delete<T>(id: getIDType<S>, config: any): Observable<T>;\n}\n","export const DEFAULT_ID_KEY = 'id';\n","import { Observable, of, OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n * @deprecated Use the operator function filterNilValue()\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>): Observable<NonNullable<T>> =>\n  source.pipe(filter((value): value is NonNullable<T> => value !== null && typeof value !== 'undefined'));\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNilValue())\n */\nexport function filterNilValue<T>(): OperatorFunction<T, NonNullable<T>> {\n  return filter((value: T): value is NonNullable<T> => value !== null && value !== undefined);\n}\n","// @internal\nexport function capitalize(value: string) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { Order } from './sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { defer, MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { Store } from './store';\n\nexport function setLoading<T>(store: Store): MonoTypeOperatorFunction<T> {\n  return function <T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n","import { Entities, EntityState, HashMap, ID, PreAddEntity } from './types';\nimport { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n\nexport type SetEntities<Entity> = Entity[] | Entities<Entity> | HashMap<Entity>;\n\nexport type SetEntitiesParams<State, Entity> = {\n  state: State;\n  entities: SetEntities<Entity>;\n  idKey: string;\n  preAddEntity: PreAddEntity<Entity>;\n  isNativePreAdd?: boolean;\n};\n\n// @internal\nexport function isEntityState<Entity>(state): state is Entities<Entity> {\n  return state.entities && state.ids;\n}\n\n// @internal\nfunction applyMiddleware<E>(entities: HashMap<E>, preAddEntity: PreAddEntity<E>) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n}\n\n// @internal\nexport function setEntities<S extends EntityState<E>, E>({ state, entities, idKey, preAddEntity, isNativePreAdd }: SetEntitiesParams<S, E>): S {\n  let newEntities: HashMap<E>;\n  let newIds: ID[];\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => (isNaN(id as any) ? id : Number(id)));\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    (newState as any).active = resolveActiveEntity(newState as any);\n  }\n\n  return newState;\n}\n","// @internal\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { ActiveState, EntityState, ID, IDS, MultiActiveState } from './types';\nimport { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n\n// @internal\nexport function hasActiveState<E>(state: EntityState<E>): state is EntityState<E> & (ActiveState | MultiActiveState) {\n  return state.hasOwnProperty('active');\n}\n\n// @internal\nexport function isMultiActiveState(active: IDS): active is ID[] {\n  return isArray(active);\n}\n\n// @internal\nexport function resolveActiveEntity<E>({ active, ids, entities }: EntityState<E> & (ActiveState | MultiActiveState)) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n\n  return active;\n}\n\n// @internal\nexport function getExitingActives(currentActivesIds: ID[], newIds: ID[]) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n\n  return filtered;\n}\n","import { Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ROOT_EFFECT_INSTANCES } from './tokens';\nimport { Actions } from './actions';\nimport { ModuleManager } from './module-manager.service';\n\n@NgModule()\nexport class EffectsRootModule {\n  constructor(private moduleManager: ModuleManager, private actions: Actions, @Inject(ROOT_EFFECT_INSTANCES) rootEffects: any[], @Optional() @SkipSelf() private parentModule?: EffectsRootModule) {\n    this.rootGuard();\n    rootEffects.forEach((effect) => this.moduleManager.subscribeToEffects(effect));\n  }\n\n  rootGuard() {\n    if (this.parentModule) {\n      throw new Error('EffectsRootModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n","import { Store } from './store';\nimport { Query } from './query';\nimport { StoreConfigOptions } from './storeConfig';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nimport { QueryConfigOptions } from './queryConfig';\nimport { EntityState } from './types';\n\nexport function createStore<State>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new Store<State>(initialState, options);\n}\n\nexport function createQuery<State>(store: Store<State>) {\n  return new Query<State>(store);\n}\n\nexport function createEntityStore<State extends EntityState>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new EntityStore<State>(initialState, options);\n}\n\nexport function createEntityQuery<State extends EntityState>(store: EntityStore<State>, options: QueryConfigOptions = {}) {\n  return new QueryEntity<State>(store, options);\n}\n","import { Inject, NgModule } from '@angular/core';\nimport { FEATURE_EFFECT_INSTANCES } from './tokens';\nimport { ModuleManager } from './module-manager.service';\n\n@NgModule()\nexport class EffectsFeatureModule {\n  constructor(private moduleManager: ModuleManager, @Inject(FEATURE_EFFECT_INSTANCES) featureEffects: any[]) {\n    featureEffects.forEach((group) =>\n      group.forEach((effect) => {\n        this.moduleManager.subscribeToEffects(effect);\n      })\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { isObject } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { NgEntityServiceParams } from './types';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE,\n  },\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function (constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n","import { Subject } from 'rxjs';\nimport { logAction, setAction } from './actions';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { isDev } from './env';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { hasEntity } from './hasEntity';\nimport { isDefined } from './isDefined';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { removeEntities } from './removeEntities';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { StoreConfigOptions } from './storeConfig';\nimport { transaction } from './transaction';\nimport {\n  Constructor,\n  CreateStateCallback,\n  EntityState,\n  EntityUICreateFn,\n  getEntityType,\n  getIDType,\n  IDS,\n  OrArray,\n  StateWithActive,\n  UpdateEntityPredicate,\n  UpdateStateCallback,\n  UpsertStateCallback,\n} from './types';\nimport { updateEntities } from './updateEntities';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n  private entityIdChanges = new Subject<{ newId: IDType; oldId: IDType; pending: boolean }>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$() {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get selectEntityIdChanges$() {\n    return this.entityIdChanges.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>, options: { activeId?: IDType | null } = {}) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n    this.setHasCache(true, { restartTTL: true });\n\n    this._setState((state) => {\n      const newState = setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd,\n      });\n\n      if (isUndefined(options.activeId) === false) {\n        (newState as any).active = options.activeId;\n      }\n\n      return newState;\n    });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options,\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter((id) => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n\n    let entityIdChanged:\n      | undefined\n      | {\n          newId: IDType;\n          oldId: IDType;\n        };\n\n    this._setState((state) =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn,\n        producerFn: this._producerFn,\n        onEntityIdChanges: (oldId: IDType, newId: IDType) => {\n          entityIdChanged = { oldId, newId };\n          this.entityIdChanges.next({ ...entityIdChanged, pending: true });\n        },\n      })\n    );\n\n    if (entityIdChanged) {\n      this.entityIdChanges.next({ ...entityIdChanged, pending: false });\n    }\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update.\n   *\n   * Warning: By omitting the initializing callback parameter onCreate(), the type safety of entities cannot be guaranteed.\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true });\n   * store.upsert([2, 3], { active: true });\n   * store.upsert([2, 3], entity => ({ isOpen: !(entity?.isOpen ?? true) }))\n   *\n   */\n  upsert<NewEntityType extends Partial<EntityType>>(ids: OrArray<IDType>, newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType, options?: { baseClass?: Constructor }): void;\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true }, (id, newState) => ({ id, ...newState, enabled: true }));\n   * store.upsert([2, 3], { active: true }, (id, newState) => ({ id, ...newState, enabled: true }));\n   * store.upsert([2, 3], entity => ({ isOpen: !(entity?.isOpen ?? true) }), (id, newState) => ({ id, ...newState, enabled: true }));\n   *\n   */\n  upsert<NewEntityType extends Partial<EntityType>>(\n    ids: OrArray<IDType>,\n    newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType,\n    onCreate: CreateStateCallback<EntityType, NewEntityType, IDType>,\n    options?: { baseClass?: Constructor }\n  ): void;\n  @transaction()\n  upsert<NewEntityType extends Partial<EntityType>>(\n    ids: OrArray<IDType>,\n    newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType,\n    onCreate?: CreateStateCallback<EntityType, NewEntityType, IDType> | { baseClass?: Constructor },\n    options: { baseClass?: Constructor } = {}\n  ) {\n    const toArray = coerceArray(ids);\n    const predicate = (isUpdate) => (id) => hasEntity(this.entities, id) === isUpdate;\n    const baseClass = isFunction(onCreate) ? options.baseClass : onCreate ? onCreate.baseClass : undefined;\n    const isClassBased = isFunction(baseClass);\n\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map((id) => {\n      const newStateObj = typeof newState === 'function' ? newState({}) : newState;\n      const entity = isFunction(onCreate) ? onCreate(id, newStateObj) : newStateObj;\n      const withId = { ...entity, [this.idKey]: id };\n      if (isClassBased) {\n        return new baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds, newState as UpdateStateCallback<EntityType, NewEntityType>);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState((state) => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities,\n      },\n      loading: !!options.loading,\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const replaced = {};\n    for (const id of toArray) {\n      replaced[id] = { ...newState, [this.idKey]: id };\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState((state) => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced,\n      },\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState((state) => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities,\n      },\n      ids,\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter((entityId) => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : this.ids;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n\n    if (!idPassed) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : SetActiveOptions | S['active']);\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every((id) => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState((state) => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques,\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some((id) => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState((state) => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter((currentId) => toArray.indexOf(currentId) === -1) : null,\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = (remove) => (id) => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState((state) => {\n      return {\n        ...state,\n        active: ids,\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = (id) => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui,\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter((id) => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ProductsModule } from './products/products.module';\nimport { CartModule } from './cart/cart.module';\nimport { ProductPageComponent } from './product-page/product-page.component';\nimport { NavComponent } from './nav/nav.component';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthGuard } from './auth/auth.guard';\nimport { HttpMethod, NG_ENTITY_SERVICE_CONFIG, NgEntityServiceGlobalConfig } from '@datorama/akita-ng-entity-service';\nimport { AkitaNgRouterStoreModule } from '@datorama/akita-ng-router-store';\nimport { AkitaNgDevtools } from '@datorama/akita-ngdevtools';\nimport { CartEffects } from './cart/state/cart.effects';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\n\n@NgModule({\n  declarations: [AppComponent, NavComponent, ProductPageComponent],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    ProductsModule,\n    CartModule,\n    AuthModule,\n    AkitaNgRouterStoreModule,\n    AkitaNgDevtools.forRoot(),\n    AkitaNgEffectsModule.forRoot([CartEffects]),\n  ],\n  providers: [\n    AuthGuard,\n    {\n      provide: NG_ENTITY_SERVICE_CONFIG,\n      useFactory: function () {\n        return {\n          baseUrl: 'https://jsonplaceholder.typicode.com',\n          httpMethods: {\n            PUT: HttpMethod.PATCH,\n          },\n        } as NgEntityServiceGlobalConfig;\n      },\n      deps: [],\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","// @internal\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n\nexport interface ResetStoresParams {\n  exclude: string[];\n}\n\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n","import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\nimport { ItemPredicate } from './types';\n\n// @internal\nexport function findEntityByPredicate<E>(predicate: ItemPredicate<E>, entities) {\n    for(const entityId of Object.keys(entities)) {\n      if(predicate(entities[entityId]) === true) {\n        return entityId;\n      }\n    }\n\n    return undefined;\n}\n\n// @internal\nexport function getEntity( id, project ) {\n  return function(entities) {\n    const entity = entities[id];\n\n    if(isUndefined(entity)) {\n      return undefined;\n    }\n\n    if(!project) {\n      return entity;\n    }\n\n    if(isString(project)) {\n      return entity[project];\n    }\n\n    return (project as Function)(entity);\n  };\n\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isEmpty<T>(arr: T) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n","import { Injectable } from '@angular/core';\nimport { CartState, CartStore } from './cart.store';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { QueryEntity } from '@datorama/akita';\nimport { ProductsQuery } from '../../products/state/products.query';\n\n@Injectable({ providedIn: 'root' })\nexport class CartQuery extends QueryEntity<CartState> {\n  constructor(protected store: CartStore, private productsQuery: ProductsQuery) {\n    super(store);\n  }\n\n  selectItems$ = combineLatest([this.selectAll(), this.productsQuery.selectAll({ asObject: true })]).pipe(map(joinItems), shareReplay({ bufferSize: 1, refCount: true }));\n\n  selectTotal$ = this.selectItems$.pipe(map(items => items.reduce((acc, item) => acc + item.total, 0)));\n\n  selectNotification$ = this.select((state) => state.notify);\n}\n\nfunction joinItems([cartItems, products]) {\n  return cartItems.map(cartItem => {\n    const product = products[cartItem.productId];\n    return {\n      ...cartItem,\n      ...product,\n      total: cartItem.quantity * product.price\n    };\n  });\n}\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\n// @internal\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","/**\n * Create an array value comparator for a specific key of the value.\n * @param prop The property of the value to be compared.\n */\nexport function byKey<T>(prop: keyof T) {\n  return (a: T, b: T) => a[prop] === b[prop];\n}\n\n/**\n * Create an array value comparator for the id field of an array value.\n */\nexport function byId<T extends Record<'id', any>>() {\n  return byKey<T>('id');\n}\n\n/**\n * Adds or removes a value from an array by comparing its values. If a matching value exists it is removed, otherwise\n * it is added to the array.\n *\n * @param array The array to modify.\n * @param newValue The new value to toggle.\n * @param compare A compare function to determine equality of array values. Default is an equality test by object identity.\n */\nexport function arrayToggle<T>(array: T[], newValue: T, compare: (a: T, b: T) => boolean = (a, b) => a === b) {\n  const index = array.findIndex((oldValue) => compare(newValue, oldValue));\n  return !!~index ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array, newValue];\n}\n","// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || (config && config.sortBy);\n  options.sortByOrder = options.sortByOrder || (config && config.sortByOrder);\n}\n","import { Component } from '@angular/core';\nimport { RouterQuery } from '@datorama/akita-ng-router-store';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  constructor(r: RouterQuery) {\n    // r.select().subscribe(console.log);\n  }\n}\n","<section class=\"flex flex-column height\">\n  <app-nav class=\"block\"></app-nav>\n  <div class=\"flex-1\">\n    <router-outlet></router-outlet>\n  </div>\n  <footer class=\"page-footer cyan lighten-2\">\n    <div class=\"footer-copyright\">\n      <div class=\"container\">\n        © 2018 Copyright Datorama\n      </div>\n    </div>\n  </footer>\n</section>\n","import { ReplaySubject, Subject } from 'rxjs';\nimport { StoreSnapshotAction } from './actions';\n\n// @internal\nexport const $$deleteStore = new Subject<string>();\n// @internal\nexport const $$addStore = new ReplaySubject<string>(50, 5000);\n// @internal\nexport const $$updateStore = new Subject<{ storeName: string; action: StoreSnapshotAction }>();\n\n// @internal\nexport function dispatchDeleted(storeName: string) {\n  $$deleteStore.next(storeName);\n}\n\n// @internal\nexport function dispatchAdded(storeName: string) {\n  $$addStore.next(storeName);\n}\n\n// @internal\nexport function dispatchUpdate(storeName: string, action: StoreSnapshotAction) {\n  $$updateStore.next({ storeName, action });\n}\n"]}