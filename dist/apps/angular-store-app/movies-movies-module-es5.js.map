{"version":3,"sources":["webpack:///apps/angular-store-app/src/app/movies/normalized.ts","webpack:///apps/angular-store-app/src/app/movies/state/movies.service.ts","webpack:///apps/angular-store-app/src/app/movies/genres/state/genres.query.ts","webpack:///apps/angular-store-app/src/app/movies/genres/state/genres.store.ts","webpack:///apps/angular-store-app/src/app/movies/state/movie.effects.ts","webpack:///apps/angular-store-app/src/app/movies/actors/state/actors.store.ts","webpack:///apps/angular-store-app/src/app/movies/movies.module.ts","webpack:///apps/angular-store-app/src/app/movies/actors/state/actors.query.ts","webpack:///apps/angular-store-app/src/app/movies/state/movies.store.ts","webpack:///apps/angular-store-app/src/app/movies/movies/movies.component.html","webpack:///apps/angular-store-app/src/app/movies/movies/movies.component.ts","webpack:///apps/angular-store-app/src/app/movies/state/movies.query.ts"],"names":["movies","entities","genres","id","name","actors","title","result","MoviesService","moviesStore","actorsStore","genresStore","moviesQuery","request$","pipe","response","set","ids","getHasCache","update","ui","entity","isOpen","remove","providedIn","deleteActor","GenresQuery","store","GenresStore","MovieEffects","actions$","movieStore","allActionsMovie","action","console","log","dispatch","ActorsStore","routes","path","component","MoviesModule","forChild","forFeature","imports","declarations","ActorsQuery","MoviesStore","createUIStore","setInitialEntityState","MoviesComponent","actorsQuery","moviesService","edits","Set","isLoading$","selectLoading","movies$","selectMovies","actors$","selectAll","getMovies","subscribe","updateActorName","actorName","has","add","focus","selectEntity","markAsOpen","actor","selector","templateUrl","styleUrls","MoviesQuery","genresQuery","createUIQuery","asObject","map","movie","actorId","genreId"],"mappings":"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","file":"movies-movies-module-es5.js","sourcesContent":["export const movies = {\n  entities: {\n    genres: {\n      '1': {\n        id: 1,\n        name: 'Action'\n      },\n      '2': {\n        id: 2,\n        name: 'Adventure'\n      },\n      '3': {\n        id: 3,\n        name: 'Crime'\n      },\n      '4': {\n        id: 4,\n        name: 'Drama'\n      },\n      '5': {\n        id: 5,\n        name: 'Mystery'\n      },\n      '6': {\n        id: 6,\n        name: 'Sci-Fi'\n      }\n    },\n    actors: {\n      '288': {\n        id: 288,\n        name: 'Christian Bale'\n      },\n      '323': {\n        id: 323,\n        name: 'Michael Caine'\n      },\n      '5132': {\n        id: 5132,\n        name: 'Heath Ledger'\n      },\n      '413168': {\n        id: 413168,\n        name: 'Hugh Jackman'\n      },\n      '3822462': {\n        id: 3822462,\n        name: 'Rila Fukushima'\n      },\n      '5148840': {\n        id: 5148840,\n        name: 'Tao Okamoto'\n      }\n    },\n    movies: {\n      '468569': {\n        id: 468569,\n        title: 'The Dark Knight',\n        genres: [1, 3, 4],\n        actors: [288, 5132, 323]\n      },\n      '482571': {\n        id: 482571,\n        title: 'The Prestige',\n        genres: [4, 5, 6],\n        actors: [413168, 288, 323]\n      },\n      '1430132': {\n        id: 1430132,\n        title: 'The Wolverine',\n        genres: [1, 2, 6],\n        actors: [413168, 5148840, 3822462]\n      }\n    }\n  },\n  result: [468569, 482571, 1430132]\n};\n","import { Injectable } from '@angular/core';\nimport { MoviesStore } from './movies.store';\nimport { ID, transaction, withTransaction, arrayRemove } from '@datorama/akita';\nimport { of, timer } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport { movies } from '../normalized';\nimport { ActorsStore } from '../actors/state/actors.store';\nimport { GenresStore } from '../genres/state/genres.store';\nimport { MoviesQuery } from './movies.query';\n\n@Injectable({ providedIn: 'root' })\nexport class MoviesService {\n  constructor(private moviesStore: MoviesStore, private actorsStore: ActorsStore, private genresStore: GenresStore, private moviesQuery: MoviesQuery) {}\n\n  getMovies() {\n    const request$ = timer(1000).pipe(\n      mapTo(movies),\n      withTransaction(response => {\n        this.actorsStore.set(response.entities.actors);\n        this.genresStore.set(response.entities.genres);\n        const movies = {\n          entities: response.entities.movies,\n          ids: response.result\n        };\n        this.moviesStore.set(movies);\n      })\n    );\n\n    return this.moviesQuery.getHasCache() ? of() : request$;\n  }\n\n  updateActorName(id: ID, name: string) {\n    this.actorsStore.update(id, { name });\n  }\n\n  markAsOpen(id: ID) {\n    this.moviesStore.ui.update(id, entity => ({ isOpen: !entity.isOpen }));\n  }\n\n  @transaction()\n  deleteActor(id: ID) {\n    this.actorsStore.remove(id);\n    this.moviesStore.update(null, entity => ({ actors: arrayRemove(entity.actors, id) }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GenresStore, GenresState } from './genres.store';\nimport { QueryEntity } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class GenresQuery extends QueryEntity<GenresState> {\n  constructor(protected store: GenresStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Genre } from './genre.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\n\nexport interface GenresState extends EntityState<Genre> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'genres' })\nexport class GenresStore extends EntityStore<GenresState> {\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@datorama/akita-ng-effects';\nimport { MoviesStore } from './movies.store';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MovieEffects {\n  constructor(private actions$: Actions, private movieStore: MoviesStore) {}\n\n  @Effect({ dispatch: false })\n  allActionsMovie = this.actions$.pipe(tap((action) => console.log('movie effect', action)));\n}\n","import { Injectable } from '@angular/core';\nimport { Actor } from './actor.model';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\n\nexport interface ActorsState extends EntityState<Actor> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'actors' })\nexport class ActorsStore extends EntityStore<ActorsState> {\n  constructor() {\n    super();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MoviesComponent } from './movies/movies.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\nimport { MovieEffects } from './state/movie.effects';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MoviesComponent,\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), AkitaNgEffectsModule.forFeature([MovieEffects])],\n  declarations: [MoviesComponent],\n})\nexport class MoviesModule {}\n","import { Injectable } from '@angular/core';\nimport { ActorsStore, ActorsState } from './actors.store';\nimport { QueryEntity } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class ActorsQuery extends QueryEntity<ActorsState> {\n  constructor(protected store: ActorsStore) {\n    super(store);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Movie } from './movie.model';\nimport { EntityState, EntityStore, EntityUIStore, StoreConfig } from '@datorama/akita';\n\nexport interface MovieUI {\n  isOpen: boolean;\n}\n\nexport interface MoviesState extends EntityState<Movie> {}\n\nexport interface MoviesUIState extends EntityState<MovieUI> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'movies' })\nexport class MoviesStore extends EntityStore<MoviesState> {\n  ui: EntityUIStore<MoviesUIState>;\n\n  constructor() {\n    super();\n    this.createUIStore().setInitialEntityState<MovieUI>({ isOpen: true });\n  }\n}\n","<section class=\"padding\">\n\n  <div class=\"progress\" *ngIf=\"isLoading$ | async\">\n    <div class=\"indeterminate\"></div>\n  </div>\n\n  <h3>Movies</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Title</th>\n        <th>Actors</th>\n        <th>Genres</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let movie of movies$ | async\" (click)=\"markAsOpen(movie.id)\" [ngStyle]=\"(isOpen(movie.id) | async) && { background: 'lightgrey' }\">\n        <td>{{movie.title}}</td>\n        <td><span *ngFor=\"let actor of movie.actors\">{{actor.name}}</span></td>\n        <td><span *ngFor=\"let genre of movie.genres\">{{genre.name}}</span></td>\n      </tr>\n    </tbody>\n  </table>\n\n  <h3>Actors</h3>\n  <table style=\"width: 30%;\">\n    <thead>\n      <tr>\n        <th>Name</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let actor of actors$ | async\">\n        <td class=\"flex align-center\">\n          <input #actorName [value]=\"actor.name\" class=\"actor-input\" [class.view]=\"!inEditMode(actor.id)\"\n                 (keyup.enter)=\"edit(actor.id, actorName.value)\">\n          <i class=\"tiny material-icons\" (click)=\"toggleView(actor.id, actorName)\">edit</i>\n        </td>\n        <td><button (click)=\"deleteActor(actor)\">Delete</button></td>\n      </tr>\n    </tbody>\n  </table>\n\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FullMovie } from '../state/movie.model';\nimport { ID } from '@datorama/akita';\nimport { MoviesQuery } from '../state/movies.query';\nimport { MoviesService } from '../state/movies.service';\nimport { ActorsQuery } from '../actors/state/actors.query';\nimport { Actor } from '../actors/state/actor.model';\nimport { memo } from 'helpful-decorators';\n\n@Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.css']\n})\nexport class MoviesComponent implements OnInit {\n  movies$: Observable<FullMovie[]>;\n  actors$: Observable<Actor[]>;\n  isLoading$: Observable<boolean>;\n  private edits = new Set();\n\n  constructor(private moviesQuery: MoviesQuery, private actorsQuery: ActorsQuery, private moviesService: MoviesService) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.moviesQuery.selectLoading();\n\n    this.movies$ = this.moviesQuery.selectMovies();\n    this.actors$ = this.actorsQuery.selectAll();\n    this.moviesService.getMovies().subscribe();\n  }\n\n  edit(id: ID, name: string) {\n    this.moviesService.updateActorName(id, name);\n    this.edits.delete(id);\n  }\n\n  toggleView(id: ID, actorName: HTMLInputElement) {\n    if (this.edits.has(id)) {\n      this.edits.delete(id);\n    } else {\n      this.edits.add(id);\n      actorName.focus();\n    }\n  }\n\n  inEditMode(id: ID) {\n    return this.edits.has(id);\n  }\n\n  @memo()\n  isOpen(id: ID) {\n    return this.moviesQuery.ui.selectEntity(id, 'isOpen');\n  }\n\n  markAsOpen(id: ID) {\n    this.moviesService.markAsOpen(id);\n  }\n\n  deleteActor(actor: Actor) {\n    this.moviesService.deleteActor(actor.id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MoviesState, MoviesStore, MoviesUIState } from './movies.store';\nimport {\n  EntityUIQuery,\n  ID,\n  QueryEntity,\n  combineQueries\n} from '@datorama/akita';\nimport { map } from 'rxjs/operators';\nimport { ActorsQuery } from '../actors/state/actors.query';\nimport { GenresQuery } from '../genres/state/genres.query';\n\n@Injectable({ providedIn: 'root' })\nexport class MoviesQuery extends QueryEntity<MoviesState> {\n  ui: EntityUIQuery<MoviesUIState>;\n\n  constructor(\n    protected store: MoviesStore,\n    private actorsQuery: ActorsQuery,\n    private genresQuery: GenresQuery\n  ) {\n    super(store);\n    this.createUIQuery();\n  }\n\n  selectMovies() {\n    return combineQueries([\n      this.selectAll(),\n      this.actorsQuery.selectAll({ asObject: true }),\n      this.genresQuery.selectAll({ asObject: true })\n    ]).pipe(\n      map(([movies, actors, genres]) => {\n        return movies.map(movie => {\n          return {\n            ...movie,\n            actors: movie.actors.map(actorId => actors[actorId]),\n            genres: movie.genres.map(genreId => genres[genreId])\n          };\n        });\n      })\n    );\n  }\n}\n"]}