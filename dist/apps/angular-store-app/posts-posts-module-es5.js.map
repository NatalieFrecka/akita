{"version":3,"sources":["webpack:///apps/angular-store-app/src/app/posts/state/posts.query.ts","webpack:///apps/angular-store-app/src/app/posts/state/posts.store.ts","webpack:///apps/angular-store-app/src/app/posts/state/index.ts","webpack:///apps/angular-store-app/src/app/posts/posts.module.ts","webpack:///apps/angular-store-app/src/app/posts/posts.component.html","webpack:///apps/angular-store-app/src/app/posts/posts.component.ts","webpack:///apps/angular-store-app/src/app/posts/state/post.effects.ts","webpack:///apps/angular-store-app/src/app/posts/state/posts.service.ts"],"names":["PostsQuery","store","providedIn","PostsStore","name","routes","path","component","PostsModule","forChild","forFeature","declarations","imports","PostsComponent","postsQuery","postsService","loader","notifier","posts$","selectAll","loaders","loadersFor","action$","pipe","subscribe","v","console","log","get","mapResponseFn","res","deleteEntity","add","id","title","body","prepend","update","successMsg","updateEntity","fetchOne","remove","templateUrl","styleUrls","updateEntityLoading","deleteEntityLoading","PostEffects","actions$","postStore","allActionsPost","action","dispatch","PostsService"],"mappings":"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","file":"posts-posts-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { PostsStore, PostsState } from './posts.store';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsQuery extends QueryEntity<PostsState> {\n\n  constructor(protected store: PostsStore) {\n    super(store);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\nimport { Post } from './post.model';\n\nexport interface PostsState extends EntityState<Post, number> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'posts' })\nexport class PostsStore extends EntityStore<PostsState> {\n\n  constructor() {\n    super();\n  }\n\n}\n\n","export * from './posts.query';\nexport * from './posts.store';\nexport * from './posts.service';\nexport * from './post.model';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PostsComponent } from './posts.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AkitaNgEffectsModule } from '@datorama/akita-ng-effects';\nimport { PostEffects } from './state/post.effects';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PostsComponent,\n  },\n];\n\n@NgModule({\n  declarations: [PostsComponent],\n  imports: [CommonModule, RouterModule.forChild(routes), AkitaNgEffectsModule.forFeature([PostEffects])],\n})\nexport class PostsModule {}\n","<div class=\"container\" class=\"padding\">\n  <h1>Entity Service</h1>\n\n  <ng-template #idle>Idle</ng-template>\n\n  <h5>Loaders</h5>\n  <p>Get => <span *ngIf=\"(loaders.get$ | async); else idle\">Loading...</span></p>\n  <p>POST => <span *ngIf=\"(loaders.add$ | async); else idle\">Loading...</span></p>\n  <p>PUT => <span *ngIf=\"(loaders.update$ | async); else idle\">Loading...</span></p>\n  <p>DELETE => <span *ngIf=\"(loaders.delete$ | async); else idle\">Loading...</span></p>\n\n  <p>PUT id 3 => <span *ngIf=\"updateEntityLoading(3) | async; else idle\">Loading...</span></p>\n  <p>DELETE id 3 => <span *ngIf=\"deleteEntityLoading(3) | async; else idle\">Loading...</span></p>\n\n  <section style=\"margin-bottom: 10px;\">\n    <button (click)=\"fetchOne()\" class=\"btn waves-effect waves-light\">Fetch posts/1</button>\n    <button (click)=\"add()\" class=\"btn waves-effect waves-light\">Add</button>\n    <button (click)=\"update(1)\" class=\"btn waves-effect waves-light\">Update</button>\n    <button (click)=\"remove(1)\" class=\"btn waves-effect waves-light\">Remove</button>\n\n    <button (click)=\"update(3)\" class=\"btn waves-effect waves-light\">Update id 3</button>\n    <button (click)=\"remove(3)\" class=\"btn waves-effect waves-light\">Remove id 3</button>\n  </section>\n\n  <h3 *ngIf=\"(loaders.get$ | async); else posts\">Loading...</h3>\n\n  <ng-template #posts>\n    <div *ngFor=\"let post of (posts$ | async)\">\n      {{ post.title }}\n    </div>\n  </ng-template>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { filterMethod, NgEntityServiceLoader, NgEntityServiceNotifier, ofType } from '@datorama/akita-ng-entity-service';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { memo } from 'helpful-decorators';\nimport { PostsQuery, PostsService } from './state';\n\n@UntilDestroy()\n@Component({\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.css'],\n})\nexport class PostsComponent implements OnInit {\n  posts$ = this.postsQuery.selectAll();\n  loaders = this.loader.loadersFor();\n\n  constructor(private postsQuery: PostsQuery, private postsService: PostsService, private loader: NgEntityServiceLoader, private notifier: NgEntityServiceNotifier) {}\n\n  ngOnInit() {\n    this.notifier.action$.pipe(ofType('success'), filterMethod('DELETE'), untilDestroyed(this)).subscribe((v) => console.log(v));\n\n    this.postsService\n      .get({\n        mapResponseFn: (res) => {\n          return res;\n        },\n      })\n      .subscribe();\n    this.loaders.deleteEntity(3);\n  }\n\n  fetchOne() {\n    this.postsService.get(1).subscribe(console.log);\n  }\n\n  add() {\n    this.postsService.add({ id: 1222, title: 'New Post', body: '' }, { prepend: true }).subscribe();\n  }\n\n  update(id) {\n    this.postsService.update(id, { title: 'New title' }).subscribe();\n  }\n\n  remove(id) {\n    this.postsService\n      .delete(id, {\n        successMsg: 'Deleted Successfully',\n      })\n      .subscribe();\n  }\n\n  @memo()\n  updateEntityLoading(id) {\n    return this.loaders.updateEntity(id);\n  }\n\n  @memo()\n  deleteEntityLoading(id) {\n    return this.loaders.deleteEntity(id);\n  }\n\n  ngOnDestroy() {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@datorama/akita-ng-effects';\nimport { PostsStore } from './posts.store';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostEffects {\n  constructor(private actions$: Actions, private postStore: PostsStore) {}\n\n  @Effect({ dispatch: false })\n  allActionsPost = this.actions$.pipe(tap((action) => console.log('post effect', action)));\n}\n","import { Injectable } from '@angular/core';\nimport { PostsState, PostsStore } from './posts.store';\nimport { NgEntityService } from '@datorama/akita-ng-entity-service';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService extends NgEntityService<PostsState> {\n  constructor(protected store: PostsStore) {\n    super(store);\n  }\n}\n"]}