{"version":3,"sources":["webpack:///apps/angular-store-app/src/app/widgets/widgets.component.ts","webpack:///apps/angular-store-app/src/app/widgets/widgets.component.html","webpack:///apps/angular-store-app/src/app/widgets/state/widgets.query.ts","webpack:///apps/angular-store-app/src/app/widgets/state/widget.model.ts","webpack:///apps/angular-store-app/src/app/widgets/state/widgets.service.ts","webpack:///apps/angular-store-app/src/app/widgets/widgets.module.ts","webpack:///apps/angular-store-app/src/app/widgets/state/widgets.store.ts"],"names":["WidgetsComponent","widgetsQuery","widgetService","hasEntity","initWidgets","dashoboardName$","select","state","name","widgets$","selectAll","activeWidgets$","selectActive","collection","watchProperty","setHead","widgetsSpecific","nameInput","updateName","value","id","updateWidget","add","remove","reset","destroy","addActive","removeActive","toggleActive","revertStore","selector","templateUrl","WidgetsQuery","store","providedIn","_id","createWidget","resetId","count","WidgetsService","widgetsStore","widgets","set","update","routes","path","component","WidgetsModule","forChild","imports","declarations","initState","active","WidgetsStore"],"mappings":"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","file":"widgets-widgets-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DirtyCheckPlugin, EntityDirtyCheckPlugin, ID } from '@datorama/akita';\nimport { resetId, Widget } from './state/widget.model';\nimport { WidgetsService } from './state/widgets.service';\nimport { WidgetsQuery } from './state/widgets.query';\n\n@Component({\n  selector: 'app-widgets',\n  templateUrl: './widgets.component.html'\n})\nexport class WidgetsComponent implements OnInit, OnDestroy {\n  collection: DirtyCheckPlugin;\n  widgetsSpecific: EntityDirtyCheckPlugin;\n  widgets$: Observable<Widget[]>;\n  activeWidgets$: Observable<Widget[]>;\n  dashoboardName$: Observable<string>;\n\n  constructor(\n    private widgetsQuery: WidgetsQuery,\n    private widgetService: WidgetsService\n  ) {}\n\n  ngOnInit() {\n    if (this.widgetsQuery.hasEntity() === false) {\n      this.widgetService.initWidgets();\n    }\n    this.dashoboardName$ = this.widgetsQuery.select(state => state.name);\n    this.widgets$ = this.widgetsQuery.selectAll();\n    this.activeWidgets$ = this.widgetsQuery.selectActive();\n    this.collection = new DirtyCheckPlugin(this.widgetsQuery, {\n      watchProperty: 'entities'\n    }).setHead();\n    this.widgetsSpecific = new EntityDirtyCheckPlugin(\n      this.widgetsQuery\n    ).setHead();\n  }\n\n  updateName(nameInput) {\n    this.widgetService.updateName(nameInput.value);\n  }\n\n  updateWidget(id: ID, name: string) {\n    this.widgetService.updateWidget(id, name);\n  }\n\n  add() {\n    this.widgetService.add();\n  }\n\n  remove(id?: ID) {\n    this.widgetService.remove(id);\n  }\n\n  revert(id) {\n    this.widgetsSpecific.reset(id);\n  }\n\n  revertStore() {\n    resetId(5);\n    this.collection.reset();\n  }\n\n  ngOnDestroy() {\n    resetId();\n    this.collection.destroy();\n    this.widgetsSpecific.destroy();\n  }\n\n  addActive(id: ID) {\n    this.widgetService.addActive(id);\n  }\n\n  removeActive(id: ID) {\n    this.widgetService.removeActive(id);\n  }\n\n  toggleActive(id: ID) {\n    this.widgetService.toggleActive(id);\n  }\n}\n","<div class=\"padding flex flex-column\">\n  <div class=\"flex align-center\">\n    <h4 style=\"margin-right: 20px;\">Page name: {{ dashoboardName$ | async }}</h4>\n    <input (keydown.enter)=\"updateName(pageName)\" [value]=\"dashoboardName$ | async\" #pageName style=\"width: 250px;margin-right: 20px;\">\n    <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"updateName(pageName)\">Update\n      Name\n      <i class=\"material-icons right\">save</i>\n    </button>\n  </div>\n  <div>\n    <h6>The dirty check plugin is only listening to widgets changes and therefore isn't effecting the page name</h6>\n  </div>\n  <div>\n    Active: {{activeWidgets$ | async | json}}\n  </div>\n  <div class=\"all-widgets-dirty-check flex flex-column flex-1 align-center\">\n    <table class=\"striped centered padding\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Name</th>\n          <th>Update</th>\n          <th>Revert</th>\n          <th>Delete</th>\n          <th>Set Active</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <tr *ngFor=\"let widget of widgets$ | async\">\n          <td>{{widget.id}}</td>\n          <td style=\"width: 200px;\">\n            <input (keydown.enter)=\"updateWidget(widget.id, name.value)\" [value]=\"widget.name\" #name style=\"margin-right: 20px;\">\n          </td>\n          <td>\n            <a class=\"btn-floating\">\n              <i class=\"material-icons\" (click)=\"updateWidget(widget.id, name.value)\">save</i>\n            </a>\n          </td>\n          <td>\n            <a class=\"btn-floating\" [class.disabled]=\"!(widgetsSpecific.isDirty(widget.id) | async)\">\n              <i class=\"material-icons\" (click)=\"revert(widget.id)\">undo</i>\n            </a>\n          </td>\n          <td>\n            <a class=\"btn-floating\"><i class=\"material-icons\" (click)=\"remove(widget.id)\">delete</i></a>\n          </td>\n          <td><button (click)=\"addActive(widget.id)\">Add Active</button></td>\n          <td><button (click)=\"removeActive(widget.id)\">Remove Active</button></td>\n          <td><button (click)=\"toggleActive(widget.id)\">Toggle Active</button></td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"flex sb\">\n      <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"remove()\">Clear list\n        <i class=\"material-icons right\">clear</i>\n      </button>\n      <button class=\"btn waves-effect waves-light\" style=\"margin: 20px 10px 0 0;\" (click)=\"add()\">Add widget\n        <i class=\"material-icons right\">add_circle</i>\n      </button>\n      <button class=\"btn waves-effect waves-light tooltipped\" style=\"margin: 20px 10px 0 0;\" [class.disabled]=\"!(collection.isDirty$ | async)\"\n        (click)=\"revertStore()\">Reset Store Entities\n        <i class=\"material-icons right\">undo</i>\n      </button>\n    </div>\n\n  </div>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { WidgetsState, WidgetsStore } from './widgets.store';\n\n@Injectable({ providedIn: 'root' })\nexport class WidgetsQuery extends QueryEntity<WidgetsState> {\n  constructor(protected store: WidgetsStore) {\n    super(store);\n  }\n}\n","import { ID } from '@datorama/akita';\n\nexport type Widget = {\n  id: ID;\n  name: string;\n};\n\nlet _id = 0;\n\nexport function createWidget() {\n  return {\n    id: ++_id,\n    name: `Widget ${_id}`\n  } as Widget;\n}\n\nexport function resetId(count?: number) {\n  _id = count || 0;\n}\n","import { Injectable } from '@angular/core';\nimport { WidgetsStore } from './widgets.store';\nimport { createWidget } from './widget.model';\nimport { ID } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class WidgetsService {\n  constructor(private widgetsStore: WidgetsStore) {}\n\n  initWidgets() {\n    const widgets = [createWidget(), createWidget(), createWidget(), createWidget(), createWidget()];\n    this.widgetsStore.set(widgets);\n  }\n\n  updateWidget(id: ID, name: string) {\n    this.widgetsStore.update(id, { name });\n  }\n\n  add() {\n    this.widgetsStore.add(createWidget());\n  }\n\n  remove(id?: ID) {\n    this.widgetsStore.remove(id);\n  }\n\n  updateName(name: string) {\n    this.widgetsStore.update({ name });\n  }\n\n  addActive(id: ID) {\n    this.widgetsStore.addActive(id);\n  }\n\n  removeActive(id: ID) {\n    this.widgetsStore.removeActive(id);\n  }\n\n  toggleActive(id: ID) {\n    this.widgetsStore.toggleActive(id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WidgetsComponent } from './widgets.component';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WidgetsComponent\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes)],\n  declarations: [WidgetsComponent]\n})\nexport class WidgetsModule {}\n","import { Injectable } from '@angular/core';\nimport { Widget } from './widget.model';\nimport { EntityState, EntityStore, StoreConfig, MultiActiveState } from '@datorama/akita';\n\nexport interface WidgetsState extends EntityState<Widget>, MultiActiveState {\n  name: string;\n}\n\nconst initState = {\n  name: 'Akita widgets',\n  active: []\n};\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'widgets' })\nexport class WidgetsStore extends EntityStore<WidgetsState> {\n  constructor() {\n    super(initState);\n  }\n}\n"]}