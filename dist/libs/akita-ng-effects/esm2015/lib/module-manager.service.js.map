{"version":3,"file":"module-manager.service.js","sourceRoot":"ng://@datorama/akita-ng-effects/","sources":["lib/module-manager.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAmB,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;;;AAMpC,MAAM,OAAO,aAAa;IAIxB,YAAoB,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;QAHrC,0BAAqB,GAAG,IAAI,OAAO,EAAE,CAAC;QACtC,oBAAe,GAAG,IAAI,OAAO,EAAE,CAAC;IAEQ,CAAC;IAEzC,kBAAkB,CAAC,cAAyB;QAC1C,KAAK,IAAI,GAAG,IAAI,cAAc,EAAE;YAC9B,MAAM,QAAQ,GAAW,cAAc,CAAC,GAAG,CAAC,CAAC;YAC7C,IAAI,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;gBAC9B,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,YAAY,EAAE,EAAE;oBACxE,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;aACJ;SACF;IACH,CAAC;IAED,GAAG,CAAC,MAAiB;QACnB,OAAO,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED,GAAG,CAAC,MAAiB;QACnB,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEO,cAAc,CAAC,QAAgB,EAAE,YAAuC;QAC9E,IAAI,QAAQ,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;YAC7D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,WAAW,CAAC,MAAoB;QACtC,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,OAAO,IAAI,CAAC;SACb;QACD,MAAM,IAAI,SAAS,CAAC,8EAA8E,CAAC,CAAC;IACtG,CAAC;IAED,WAAW;QACT,+DAA+D;QAC/D,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,qBAAqB,GAAG,IAAI,OAAO,EAAE,CAAC;IAC7C,CAAC;;0EA1CU,aAAa;qDAAb,aAAa,WAAb,aAAa,mBAFZ,MAAM;kDAEP,aAAa;cAHzB,UAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","sourcesContent":["import { Injectable, OnDestroy, Type } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Actions } from './actions';\nimport { Action, Effect } from './types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModuleManager implements OnDestroy {\n  effectInstanceSources = new WeakSet();\n  destroyEffects$ = new Subject();\n\n  constructor(private actions$: Actions) {}\n\n  subscribeToEffects(effectInstance: Type<any>): void {\n    for (let key in effectInstance) {\n      const property: Effect = effectInstance[key];\n      if (property.isEffect === true) {\n        property.pipe(takeUntil(this.destroyEffects$)).subscribe((actionOrSkip) => {\n          this.dispatchAction(property, actionOrSkip);\n        });\n      }\n    }\n  }\n\n  has(effect: Type<any>): boolean {\n    return this.effectInstanceSources.has(effect);\n  }\n\n  add(effect: Type<any>): void {\n    this.effectInstanceSources.add(effect);\n  }\n\n  private dispatchAction(property: Effect, actionOrSkip: Action | Record<any, any>) {\n    if (property.dispatchAction && this.checkAction(actionOrSkip)) {\n      this.actions$.dispatch(actionOrSkip);\n    }\n  }\n\n  private checkAction(action: Action | any): action is Action & Record<'type', any> {\n    if (action.type) {\n      return true;\n    }\n    throw new TypeError('Make sure to provide a valid action type or set the option {dispatch: false}');\n  }\n\n  ngOnDestroy(): void {\n    // modules aren't supposed to be destroyed; might not be needed\n    this.destroyEffects$.next();\n    this.effectInstanceSources = new WeakSet();\n  }\n}\n"]}