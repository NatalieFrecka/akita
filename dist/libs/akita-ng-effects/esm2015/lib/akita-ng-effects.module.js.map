{"version":3,"file":"akita-ng-effects.module.js","sourceRoot":"ng://@datorama/akita-ng-effects/","sources":["lib/akita-ng-effects.module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAuB,QAAQ,EAAQ,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,wBAAwB,EAAE,qBAAqB,EAAE,MAAM,UAAU,CAAC;AAC5G,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;;AAGzD,MAAM,OAAO,oBAAoB;IAC/B,MAAM,CAAC,OAAO,CAAC,cAA2B,EAAE;QAC1C,OAAO;YACL,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE;gBACT,aAAa;gBACb,OAAO;gBACP,WAAW;gBACX;oBACE,OAAO,EAAE,aAAa;oBACtB,QAAQ,EAAE,CAAC,WAAW,CAAC;iBACxB;gBACD;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,UAAU,EAAE,qBAAqB;oBACjC,IAAI,EAAE,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,CAAC;iBAC/C;aACF;SACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,iBAA8B,EAAE;QAChD,OAAO;YACL,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE;gBACT,cAAc;gBACd;oBACE,OAAO,EAAE,gBAAgB;oBACzB,QAAQ,EAAE,cAAc;oBACxB,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,KAAK,EAAE,IAAI;oBACX,UAAU,EAAE,qBAAqB;oBACjC,IAAI,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,aAAa,CAAC;iBAClD;aACF;SACF,CAAC;IACJ,CAAC;;wDAvCU,oBAAoB;uHAApB,oBAAoB;kDAApB,oBAAoB;cADhC,QAAQ;eAAC,EAAE;;AA2CZ,MAAM,UAAU,qBAAqB,CAAC,QAAkB,EAAE,YAA2B,EAAE,aAA4B;IACjH,MAAM,aAAa,GAAgB,EAAE,CAAC;IAEtC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;QACtC,aAAa,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;KACpC;IACD,sEAAsE;IACtE,uDAAuD;IACvD,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;QAC3D,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC9B,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import { Injector, ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { _FEATURE_EFFECTS, _ROOT_EFFECTS, FEATURE_EFFECT_INSTANCES, ROOT_EFFECT_INSTANCES } from './tokens';\nimport { EffectsRootModule } from './effect-root.module';\nimport { Actions } from './actions';\nimport { EffectsFeatureModule } from './effect-feature.module';\nimport { ModuleManager } from './module-manager.service';\n\n@NgModule({})\nexport class AkitaNgEffectsModule {\n  static forRoot(rootEffects: Type<any>[] = []): ModuleWithProviders<EffectsRootModule> {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        ModuleManager,\n        Actions,\n        rootEffects,\n        {\n          provide: _ROOT_EFFECTS,\n          useValue: [rootEffects],\n        },\n        {\n          provide: ROOT_EFFECT_INSTANCES,\n          useFactory: createEffectInstances,\n          deps: [Injector, _ROOT_EFFECTS, ModuleManager],\n        },\n      ],\n    };\n  }\n\n  static forFeature(featureEffects: Type<any>[] = []): ModuleWithProviders<EffectsFeatureModule> {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: _FEATURE_EFFECTS,\n          useValue: featureEffects,\n          multi: true,\n        },\n        {\n          provide: FEATURE_EFFECT_INSTANCES,\n          multi: true,\n          useFactory: createEffectInstances,\n          deps: [Injector, _FEATURE_EFFECTS, ModuleManager],\n        },\n      ],\n    };\n  }\n}\n\nexport function createEffectInstances(injector: Injector, effectGroups: Type<any>[][], moduleManager: ModuleManager): any[] {\n  const mergedEffects: Type<any>[] = [];\n\n  for (const effectGroup of effectGroups) {\n    mergedEffects.push(...effectGroup);\n  }\n  // todo we shouldn't use a map to avoid registering the effects twice;\n  // fix the underlying issue for feature is called twice\n  const effectInstances = mergedEffects.reduce((acc, effect) => {\n    if (!moduleManager.has(effect)) {\n      moduleManager.add(effect);\n      acc.push(injector.get(effect));\n    }\n    return acc;\n  }, []);\n\n  return effectInstances;\n}\n"]}